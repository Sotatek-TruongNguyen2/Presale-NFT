/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SneakyVampireSyndicateInterface extends ethers.utils.Interface {
  functions: {
    "SVS_GIFT()": FunctionFragment;
    "SVS_MAX()": FunctionFragment;
    "SVS_PER_MINT()": FunctionFragment;
    "SVS_PRICE()": FunctionFragment;
    "SVS_PRIVATE()": FunctionFragment;
    "SVS_PUBLIC()": FunctionFragment;
    "SVS_PUBLIC_PER_SALER()": FunctionFragment;
    "addToPresaleList(address[],uint256[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "gift(address[])": FunctionFragment;
    "giftedAmount()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isPresaleActive()": FunctionFragment;
    "isPresaler(address)": FunctionFragment;
    "isSaleActive()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "presaleBuy(uint256)": FunctionFragment;
    "presaleLive()": FunctionFragment;
    "presalePurchasedCount(address)": FunctionFragment;
    "presalerList(address)": FunctionFragment;
    "presalerListPurchases(address)": FunctionFragment;
    "privateAmountMinted()": FunctionFragment;
    "proof()": FunctionFragment;
    "publicAmountMinted()": FunctionFragment;
    "removeFromPresaleList(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "saleLive()": FunctionFragment;
    "salerListPurchases(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setDefaultBaseURI(string)": FunctionFragment;
    "setProvenanceHash(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "togglePresaleStatus()": FunctionFragment;
    "toggleSaleStatus()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "SVS_GIFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "SVS_MAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SVS_PER_MINT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SVS_PRICE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SVS_PRIVATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SVS_PUBLIC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SVS_PUBLIC_PER_SALER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToPresaleList",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gift", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "giftedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPresaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPresaler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presalePurchasedCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "presalerList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "presalerListPurchases",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "privateAmountMinted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proof", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicAmountMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromPresaleList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "saleLive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "salerListPurchases",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultBaseURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvenanceHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "togglePresaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleSaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "SVS_GIFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SVS_MAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SVS_PER_MINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SVS_PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SVS_PRIVATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SVS_PUBLIC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SVS_PUBLIC_PER_SALER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToPresaleList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gift", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "giftedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPresaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPresaler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "presaleBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presalePurchasedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presalerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presalerListPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateAmountMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proof", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicAmountMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromPresaleList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "salerListPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProvenanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "togglePresaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class SneakyVampireSyndicate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SneakyVampireSyndicateInterface;

  functions: {
    SVS_GIFT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_GIFT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SVS_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_MAX()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SVS_PER_MINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_PER_MINT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SVS_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_PRICE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SVS_PRIVATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_PRIVATE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SVS_PUBLIC(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_PUBLIC()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SVS_PUBLIC_PER_SALER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SVS_PUBLIC_PER_SALER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToPresaleList(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToPresaleList(address[],uint256[])"(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    "contractURI()"(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gift(
      receivers: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "gift(address[])"(
      receivers: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    giftedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "giftedAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPresaleActive(overrides?: CallOverrides): Promise<[boolean]>;

    "isPresaleActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    isPresaler(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPresaler(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSaleActive(overrides?: CallOverrides): Promise<[boolean]>;

    "isSaleActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    presaleBuy(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "presaleBuy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    presaleLive(overrides?: CallOverrides): Promise<[boolean]>;

    "presaleLive()"(overrides?: CallOverrides): Promise<[boolean]>;

    presalePurchasedCount(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "presalePurchasedCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    presalerList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "presalerList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    presalerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "presalerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    privateAmountMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    "privateAmountMinted()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proof(overrides?: CallOverrides): Promise<[string]>;

    "proof()"(overrides?: CallOverrides): Promise<[string]>;

    publicAmountMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    "publicAmountMinted()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromPresaleList(
      entries: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFromPresaleList(address[])"(
      entries: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    saleLive(overrides?: CallOverrides): Promise<[boolean]>;

    "saleLive()"(overrides?: CallOverrides): Promise<[boolean]>;

    salerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "salerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBaseURI(
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setContractURI(
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContractURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDefaultBaseURI(
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDefaultBaseURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProvenanceHash(
      hash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProvenanceHash(string)"(
      hash: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    togglePresaleStatus(overrides?: Overrides): Promise<ContractTransaction>;

    "togglePresaleStatus()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    toggleSaleStatus(overrides?: Overrides): Promise<ContractTransaction>;

    "toggleSaleStatus()"(overrides?: Overrides): Promise<ContractTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  SVS_GIFT(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_GIFT()"(overrides?: CallOverrides): Promise<BigNumber>;

  SVS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_MAX()"(overrides?: CallOverrides): Promise<BigNumber>;

  SVS_PER_MINT(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_PER_MINT()"(overrides?: CallOverrides): Promise<BigNumber>;

  SVS_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SVS_PRIVATE(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_PRIVATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SVS_PUBLIC(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_PUBLIC()"(overrides?: CallOverrides): Promise<BigNumber>;

  SVS_PUBLIC_PER_SALER(overrides?: CallOverrides): Promise<BigNumber>;

  "SVS_PUBLIC_PER_SALER()"(overrides?: CallOverrides): Promise<BigNumber>;

  addToPresaleList(
    entries: string[],
    maxAmounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToPresaleList(address[],uint256[])"(
    entries: string[],
    maxAmounts: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buy(
    tokenQuantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    tokenQuantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  "contractURI()"(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  gift(
    receivers: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "gift(address[])"(
    receivers: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  giftedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "giftedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPresaleActive(overrides?: CallOverrides): Promise<boolean>;

  "isPresaleActive()"(overrides?: CallOverrides): Promise<boolean>;

  isPresaler(addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isPresaler(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSaleActive(overrides?: CallOverrides): Promise<boolean>;

  "isSaleActive()"(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  presaleBuy(
    tokenQuantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "presaleBuy(uint256)"(
    tokenQuantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  presaleLive(overrides?: CallOverrides): Promise<boolean>;

  "presaleLive()"(overrides?: CallOverrides): Promise<boolean>;

  presalePurchasedCount(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "presalePurchasedCount(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  presalerList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "presalerList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  presalerListPurchases(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "presalerListPurchases(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  privateAmountMinted(overrides?: CallOverrides): Promise<BigNumber>;

  "privateAmountMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

  proof(overrides?: CallOverrides): Promise<string>;

  "proof()"(overrides?: CallOverrides): Promise<string>;

  publicAmountMinted(overrides?: CallOverrides): Promise<BigNumber>;

  "publicAmountMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromPresaleList(
    entries: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFromPresaleList(address[])"(
    entries: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  saleLive(overrides?: CallOverrides): Promise<boolean>;

  "saleLive()"(overrides?: CallOverrides): Promise<boolean>;

  salerListPurchases(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "salerListPurchases(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBaseURI(URI: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setContractURI(
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContractURI(string)"(
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDefaultBaseURI(
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDefaultBaseURI(string)"(
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProvenanceHash(
    hash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProvenanceHash(string)"(
    hash: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  togglePresaleStatus(overrides?: Overrides): Promise<ContractTransaction>;

  "togglePresaleStatus()"(overrides?: Overrides): Promise<ContractTransaction>;

  toggleSaleStatus(overrides?: Overrides): Promise<ContractTransaction>;

  "toggleSaleStatus()"(overrides?: Overrides): Promise<ContractTransaction>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    SVS_GIFT(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_GIFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_MAX()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PER_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PER_MINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PRIVATE(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PRIVATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PUBLIC(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PUBLIC()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PUBLIC_PER_SALER(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PUBLIC_PER_SALER()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToPresaleList(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addToPresaleList(address[],uint256[])"(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(tokenQuantity: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "buy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    "contractURI()"(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    gift(receivers: string[], overrides?: CallOverrides): Promise<void>;

    "gift(address[])"(
      receivers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    giftedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "giftedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPresaleActive(overrides?: CallOverrides): Promise<boolean>;

    "isPresaleActive()"(overrides?: CallOverrides): Promise<boolean>;

    isPresaler(addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isPresaler(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSaleActive(overrides?: CallOverrides): Promise<boolean>;

    "isSaleActive()"(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    presaleBuy(
      tokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "presaleBuy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    presaleLive(overrides?: CallOverrides): Promise<boolean>;

    "presaleLive()"(overrides?: CallOverrides): Promise<boolean>;

    presalePurchasedCount(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "presalePurchasedCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presalerList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "presalerList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presalerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "presalerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateAmountMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "privateAmountMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    proof(overrides?: CallOverrides): Promise<string>;

    "proof()"(overrides?: CallOverrides): Promise<string>;

    publicAmountMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "publicAmountMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromPresaleList(
      entries: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFromPresaleList(address[])"(
      entries: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    saleLive(overrides?: CallOverrides): Promise<boolean>;

    "saleLive()"(overrides?: CallOverrides): Promise<boolean>;

    salerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(URI: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(URI: string, overrides?: CallOverrides): Promise<void>;

    setContractURI(URI: string, overrides?: CallOverrides): Promise<void>;

    "setContractURI(string)"(
      URI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultBaseURI(URI: string, overrides?: CallOverrides): Promise<void>;

    "setDefaultBaseURI(string)"(
      URI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProvenanceHash(hash: string, overrides?: CallOverrides): Promise<void>;

    "setProvenanceHash(string)"(
      hash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    togglePresaleStatus(overrides?: CallOverrides): Promise<void>;

    "togglePresaleStatus()"(overrides?: CallOverrides): Promise<void>;

    toggleSaleStatus(overrides?: CallOverrides): Promise<void>;

    "toggleSaleStatus()"(overrides?: CallOverrides): Promise<void>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    SVS_GIFT(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_GIFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_MAX()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PER_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PER_MINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PRIVATE(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PRIVATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PUBLIC(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PUBLIC()"(overrides?: CallOverrides): Promise<BigNumber>;

    SVS_PUBLIC_PER_SALER(overrides?: CallOverrides): Promise<BigNumber>;

    "SVS_PUBLIC_PER_SALER()"(overrides?: CallOverrides): Promise<BigNumber>;

    addToPresaleList(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addToPresaleList(address[],uint256[])"(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    "contractURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gift(receivers: string[], overrides?: Overrides): Promise<BigNumber>;

    "gift(address[])"(
      receivers: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    giftedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "giftedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPresaleActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isPresaleActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPresaler(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPresaler(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSaleActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isSaleActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presaleBuy(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "presaleBuy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    presaleLive(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleLive()"(overrides?: CallOverrides): Promise<BigNumber>;

    presalePurchasedCount(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "presalePurchasedCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presalerList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "presalerList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presalerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "presalerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateAmountMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "privateAmountMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    proof(overrides?: CallOverrides): Promise<BigNumber>;

    "proof()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicAmountMinted(overrides?: CallOverrides): Promise<BigNumber>;

    "publicAmountMinted()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromPresaleList(
      entries: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeFromPresaleList(address[])"(
      entries: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    saleLive(overrides?: CallOverrides): Promise<BigNumber>;

    "saleLive()"(overrides?: CallOverrides): Promise<BigNumber>;

    salerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBaseURI(URI: string, overrides?: Overrides): Promise<BigNumber>;

    "setBaseURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setContractURI(URI: string, overrides?: Overrides): Promise<BigNumber>;

    "setContractURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDefaultBaseURI(URI: string, overrides?: Overrides): Promise<BigNumber>;

    "setDefaultBaseURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProvenanceHash(hash: string, overrides?: Overrides): Promise<BigNumber>;

    "setProvenanceHash(string)"(
      hash: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    togglePresaleStatus(overrides?: Overrides): Promise<BigNumber>;

    "togglePresaleStatus()"(overrides?: Overrides): Promise<BigNumber>;

    toggleSaleStatus(overrides?: Overrides): Promise<BigNumber>;

    "toggleSaleStatus()"(overrides?: Overrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SVS_GIFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SVS_GIFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVS_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SVS_MAX()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVS_PER_MINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SVS_PER_MINT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVS_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SVS_PRICE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVS_PRIVATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SVS_PRIVATE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVS_PUBLIC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SVS_PUBLIC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SVS_PUBLIC_PER_SALER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SVS_PUBLIC_PER_SALER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToPresaleList(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToPresaleList(address[],uint256[])"(
      entries: string[],
      maxAmounts: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gift(
      receivers: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "gift(address[])"(
      receivers: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    giftedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "giftedAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPresaleActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPresaleActive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPresaler(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPresaler(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSaleActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isSaleActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleBuy(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "presaleBuy(uint256)"(
      tokenQuantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    presaleLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "presaleLive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presalePurchasedCount(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "presalePurchasedCount(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presalerList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "presalerList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presalerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "presalerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateAmountMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "privateAmountMinted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proof()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicAmountMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "publicAmountMinted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromPresaleList(
      entries: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFromPresaleList(address[])"(
      entries: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    saleLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saleLive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salerListPurchases(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "salerListPurchases(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setContractURI(
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContractURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDefaultBaseURI(
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDefaultBaseURI(string)"(
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProvenanceHash(
      hash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProvenanceHash(string)"(
      hash: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    togglePresaleStatus(overrides?: Overrides): Promise<PopulatedTransaction>;

    "togglePresaleStatus()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    toggleSaleStatus(overrides?: Overrides): Promise<PopulatedTransaction>;

    "toggleSaleStatus()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}

import { ethers, network } from 'hardhat';
import { expect } from "chai";
import { Signer } from "ethers";
import { AvarikSaga } from '../types/AvarikSaga';
import { AvarikSaga__factory } from '../types/factories/AvarikSaga__factory';
import { AvarikSagaAttacker } from '../types/AvarikSagaAttacker';
import { AvarikSagaAttacker__factory } from '../types/factories/AvarikSagaAttacker__factory';
import { expandTo18Decimals, expandTo18DecimalsRaw } from '../utils/utilities';

describe("NFT Presale", function () {
  let NFT: AvarikSaga | undefined;
  let whitelistUser1: Signer | undefined;
  let whitelistUser2: Signer | undefined;
  let artist: Signer | undefined;
  let attacker: AvarikSagaAttacker;

  beforeEach(async () => {
    try {
      [whitelistUser1, whitelistUser2, artist] = await ethers.getSigners();
      //     method: "hardhat_impersonateAccount",
      //     params: [WHALE_ADDRESS],
      // });

      const cid = "QmVU8i23TV6MXvt3cuu9voRZVHS9SvkhW7rgsNVUJGBEuM";
      const defaultBaseURI = `https://ipfs.io/ipfs/${cid}/`;

      NFT = await new AvarikSaga__factory(whitelistUser1).deploy(defaultBaseURI);
      console.log("NFT: " + NFT.address);

      await NFT.toggleSaleStatus();
     
    } catch(err: any) {
      console.log(err.message);
    }
  });

  describe("Presale Buy Round Exploitation", async () => {
    it("EXPLOITATION", async () => {
      if (whitelistUser1 && whitelistUser2 && NFT) {
        const whitelistAddress1 = await whitelistUser1.getAddress();
        const whitelistAddress2 = await whitelistUser2.getAddress();
        
        await expect(
            new AvarikSagaAttacker__factory(whitelistUser1).deploy(NFT.address, {
                value: expandTo18DecimalsRaw(100)._hex,
                gasLimit: expandTo18DecimalsRaw(9, 6)._hex
            })
          ).to.be.revertedWith("Not allow to purchase in freeze time!");

        // await NFT.addToPresaleList(
        //   [
        //   whitelistAddress1,
        //   whitelistAddress2
        //   ],
        //   [
        //     8,
        //     9
        //   ]
        // );

        // await NFT.togglePresaleStatus();

        // await NFT.connect(whitelistUser2).presaleBuy(5, { value: expandTo18Decimals(1) });

        // for (let i = 0; i < 5; i++) {
        //   const ownerOf = await NFT.ownerOf(i + 1);
        //   expect(ownerOf).to.be.equals(whitelistAddress2);
        // }
      }
    });
  });
});
{
  "address": "0x2a66D89c08E6DA9E824dCB0c9326dc383a065BE6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "defaultBaseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AVARIK_GIFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVARIK_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVARIK_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVARIK_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVARIK_PRIVATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVARIK_PUBLIC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AVARIK_PUBLIC_PER_SALER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "entries",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addToPresaleList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenQuantity",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giftedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isPresaler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenQuantity",
          "type": "uint256"
        }
      ],
      "name": "presaleBuy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "presalePurchasedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presalerList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presalerListPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proof",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "entries",
          "type": "address[]"
        }
      ],
      "name": "removeFromPresaleList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "salerListPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setDefaultBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hash",
          "type": "string"
        }
      ],
      "name": "setProvenanceHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePresaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8abcbf57c463f1d91b1f5968cd272037f0736e7b767d39dfc2149f28ee7840f8",
  "receipt": {
    "to": null,
    "from": "0x73964F6F211D5a8428322EDFbDfEc72FF76D9fCd",
    "contractAddress": "0x2a66D89c08E6DA9E824dCB0c9326dc383a065BE6",
    "transactionIndex": 2,
    "gasUsed": "3105369",
    "logsBloom": "0x
    "blockHash": "0xe3d384e92e046ee2b99daaefe9a84de5987f6ea6554f570f221753b12277143c",
    "transactionHash": "0x8abcbf57c463f1d91b1f5968cd272037f0736e7b767d39dfc2149f28ee7840f8",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9254695,
        "transactionHash": "0x8abcbf57c463f1d91b1f5968cd272037f0736e7b767d39dfc2149f28ee7840f8",
        "address": "0x2a66D89c08E6DA9E824dCB0c9326dc383a065BE6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000073964f6f211d5a8428322edfbdfec72ff76d9fcd"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe3d384e92e046ee2b99daaefe9a84de5987f6ea6554f570f221753b12277143c"
      }
    ],
    "blockNumber": 9254695,
    "cumulativeGasUsed": "3197533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ipfs.io/ipfs/QmVU8i23TV6MXvt3cuu9voRZVHS9SvkhW7rgsNVUJGBEuM/"
  ],
  "solcInputHash": "6f9ca6785426986cd6a51d92f2e8570f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"defaultBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVARIK_GIFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVARIK_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVARIK_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVARIK_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVARIK_PRIVATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVARIK_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AVARIK_PUBLIC_PER_SALER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"entries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addToPresaleList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giftedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPresaler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"presaleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"presalePurchasedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presalerList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presalerListPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"entries\",\"type\":\"address[]\"}],\"name\":\"removeFromPresaleList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"salerListPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setDefaultBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AvarikSaga.sol\":\"AvarikSaga\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AvarikSaga.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n                                          \\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AvarikSaga is ERC721Enumerable, Ownable {\\n    using Strings for uint256;\\n    \\n    uint256 public constant AVARIK_GIFT = 88;\\n    uint256 public constant AVARIK_PRIVATE = 800;\\n    uint256 public constant AVARIK_PUBLIC = 8000;\\n    uint256 public constant AVARIK_MAX = AVARIK_GIFT + AVARIK_PUBLIC + AVARIK_PRIVATE;\\n    uint256 public constant AVARIK_PRICE = 0.08 ether;\\n    uint256 public constant AVARIK_PER_MINT = 3;\\n    uint256 public constant AVARIK_PUBLIC_PER_SALER = 5;\\n    \\n    mapping(address => uint256) public presalerList;\\n    mapping(address => uint256) public presalerListPurchases;\\n    mapping(address => uint256) public salerListPurchases;\\n    \\n    string private _contractURI;\\n    string private _tokenBaseURI;\\n    string private _defaultBaseURI;\\n    address private _artistAddress = 0xea68212b0450A929B14726b90550933bC12fF813;\\n    \\n    string public proof;\\n    uint256 public giftedAmount;\\n    uint256 public publicAmountMinted;\\n    uint256 public privateAmountMinted;\\n    bool public presaleLive;\\n    bool public saleLive;\\n    \\n    constructor(string memory defaultBaseURI_) ERC721(\\\"Avarik Saga\\\", \\\"AVARIK\\\") {\\n        _defaultBaseURI = defaultBaseURI_;\\n    }\\n    \\n    function addToPresaleList(address[] calldata entries, uint[] calldata maxAmounts) external onlyOwner {\\n        require(entries.length == maxAmounts.length, \\\"DIFFERENT_SIZE\\\");\\n        for(uint256 i = 0; i < entries.length; i++) {\\n            address entry = entries[i];\\n            require(entry != address(0), \\\"NULL_ADDRESS\\\");\\n            presalerList[entry] = maxAmounts[i];\\n        }   \\n    }\\n\\n    function removeFromPresaleList(address[] calldata entries) external onlyOwner {\\n        for(uint256 i = 0; i < entries.length; i++) {\\n            address entry = entries[i];\\n            require(entry != address(0), \\\"NULL_ADDRESS\\\");\\n            \\n            presalerList[entry] = 0;\\n        }\\n    }\\n    \\n    function buy(uint256 tokenQuantity) external payable {\\n        require(saleLive, \\\"Sale is not live\\\");\\n        require(!presaleLive, \\\"Only presalers can buy\\\");\\n        require(totalSupply() < AVARIK_MAX, \\\"All Avariks are minted\\\");\\n        require(publicAmountMinted + tokenQuantity <= AVARIK_PUBLIC, \\\"Minting would exceed the max pubic supply\\\");\\n        require(tokenQuantity <= AVARIK_PER_MINT, \\\"You can mint up to 3 Avariks per transaction\\\");\\n        require(salerListPurchases[msg.sender] + tokenQuantity <= AVARIK_PUBLIC_PER_SALER, \\\"You can not mint exceeds maximum NFT\\\");\\n        require(AVARIK_PRICE * tokenQuantity <= msg.value, \\\"Insufficient ETH sent\\\");\\n        \\n        for(uint256 i = 0; i < tokenQuantity; i++) {\\n            publicAmountMinted++;\\n            salerListPurchases[msg.sender]++;\\n            _safeMint(msg.sender, totalSupply() + 1);\\n        }\\n    }\\n    \\n    function presaleBuy(uint256 tokenQuantity) external payable {\\n        require(!saleLive && presaleLive, \\\"The presale is closed\\\");\\n        require(presalerList[msg.sender] > 0, \\\"You are not qualified for the presale\\\");\\n        require(totalSupply() < AVARIK_MAX, \\\"All Avariks are minted\\\");\\n        require(privateAmountMinted + tokenQuantity <= AVARIK_PRIVATE, \\\"Minting would exceed the presale allocation\\\");\\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= presalerList[msg.sender], \\\"You can not mint exceeds maximum NFT\\\");\\n        require(AVARIK_PRICE * tokenQuantity <= msg.value, \\\"Insufficient ETH sent\\\");\\n        \\n        for (uint256 i = 0; i < tokenQuantity; i++) {\\n            privateAmountMinted++;\\n            presalerListPurchases[msg.sender]++;\\n            _safeMint(msg.sender, totalSupply() + 1);\\n        }\\n    }\\n    \\n    function gift(address[] calldata receivers) external onlyOwner {\\n        require(totalSupply() + receivers.length <= AVARIK_MAX, \\\"MAX_MINT\\\");\\n        require(giftedAmount + receivers.length <= AVARIK_GIFT, \\\"GIFTS_EMPTY\\\");\\n        \\n        for (uint256 i = 0; i < receivers.length; i++) {\\n            giftedAmount++;\\n            _safeMint(receivers[i], totalSupply() + 1);\\n        }\\n    }\\n    \\n    function withdraw() external onlyOwner {\\n        payable(_artistAddress).transfer(address(this).balance * 2 / 5);\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n    \\n    function isPresaler(address addr) external view returns (bool) {\\n        return presalerList[addr] > 0;\\n    }\\n    \\n    function presalePurchasedCount(address addr) external view returns (uint256) {\\n        return presalerListPurchases[addr];\\n    }\\n\\n    function isSaleActive() external view returns(bool) {\\n        return saleLive;\\n    }\\n    \\n    function isPresaleActive() external view returns(bool) {\\n        return presaleLive;\\n    }\\n    // Owner functions for enabling presale, sale, revealing and setting the provenance hash\\n    function togglePresaleStatus() external onlyOwner {\\n        presaleLive = !presaleLive;\\n    }\\n    \\n    function toggleSaleStatus() external onlyOwner {\\n        saleLive = !saleLive;\\n    }\\n    \\n    function setProvenanceHash(string calldata hash) external onlyOwner {\\n        proof = hash;\\n    }\\n    \\n    function setContractURI(string calldata URI) external onlyOwner {\\n        _contractURI = URI;\\n    }\\n    \\n    function setBaseURI(string calldata URI) external onlyOwner {\\n        _tokenBaseURI = URI;\\n    }\\n    \\n    function setDefaultBaseURI(string calldata URI) external onlyOwner {\\n        _defaultBaseURI = URI;\\n    }\\n    \\n    // aWYgeW91IHJlYWQgdGhpcywgc2VuZCBGcmVkZXJpayMwMDAxLCAiZnJlZGR5IGlzIGJpZyI=\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n    \\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n        require(_exists(tokenId), \\\"Cannot query non-existent token\\\");\\n        \\n        return bytes(_tokenBaseURI).length > 0 ? string(abi.encodePacked(_tokenBaseURI, tokenId.toString())) : _defaultBaseURI;\\n    }\\n}\\n\",\"keccak256\":\"0x82ef10c6a3ab1280691e80635088be5984b4a631d2cd079ed6f8c48a544109b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601180546001600160a01b03191673ea68212b0450a929b14726b90550933bc12ff8131790553480156200003757600080fd5b5060405162003709380380620037098339810160408190526200005a91620001f7565b604080518082018252600b81526a41766172696b205361676160a81b60208083019182528351808501909452600684526541564152494b60d01b908401528151919291620000ab9160009162000151565b508051620000c190600190602084019062000151565b505050620000de620000d8620000fb60201b60201c565b620000ff565b8051620000f390601090602084019062000151565b505062000326565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200015f90620002d3565b90600052602060002090601f016020900481019282620001835760008555620001ce565b82601f106200019e57805160ff1916838001178555620001ce565b82800160010185558215620001ce579182015b82811115620001ce578251825591602001919060010190620001b1565b50620001dc929150620001e0565b5090565b5b80821115620001dc5760008155600101620001e1565b600060208083850312156200020b57600080fd5b82516001600160401b03808211156200022357600080fd5b818501915085601f8301126200023857600080fd5b8151818111156200024d576200024d62000310565b604051601f8201601f19908116603f0116810190838211818310171562000278576200027862000310565b8160405282815288868487010111156200029157600080fd5b600093505b82841015620002b5578484018601518185018701529285019262000296565b82841115620002c75760008684830101525b98975050505050505050565b600181811c90821680620002e857607f821691505b602082108114156200030a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6133d380620003366000396000f3fe60806040526004361061033f5760003560e01c806370a08231116101b0578063ab0923b7116100ec578063e051ce9711610095578063e8a3d4851161006f578063e8a3d48514610906578063e985e9c51461091b578063f2fde38b14610964578063faf924cf1461098457600080fd5b8063e051ce97146108bd578063e081b781146108d2578063e44c6a9a146108f157600080fd5b8063b88d4fde116100c6578063b88d4fde1461086a578063c87b56dd1461088a578063d96a094a146108aa57600080fd5b8063ab0923b714610818578063acdea1181461082e578063b179e0601461084a57600080fd5b8063938e3d7b116101595780639bf80316116101335780639bf80316146107665780639cf2e8d6146107935780639e273b2f146107c0578063a22cb465146107f857600080fd5b8063938e3d7b1461071b578063940f1ada1461073b57806395d89b411461075157600080fd5b8063815f7bbd1161018a578063815f7bbd146106d057806383a9e049146106e35780638da5cb5b146106fd57600080fd5b806370a0823114610686578063715018a6146106a65780637bffb4ce146106bb57600080fd5b80632f745c591161027f578063564566a8116102285780635ce7af1f116102025780635ce7af1f146105f85780635e3910901461062e57806360d938dc1461064e5780636352211e1461066657600080fd5b8063564566a8146105b05780635663c108146105cd57806359a12ad5146105e257600080fd5b80634eeeb14f116102595780634eeeb14f1461055a5780634f6ccce71461057057806355f804b31461059057600080fd5b80632f745c59146105055780633ccfd60b1461052557806342842e0e1461053a57600080fd5b8063095ea7b3116102ec57806318160ddd116102c657806318160ddd146104a557806318e06839146104ba5780631b57190e146104cf57806323b872dd146104e557600080fd5b8063095ea7b3146104455780631096952314610465578063163e1e611461048557600080fd5b806305af57321161031d57806305af5732146103b057806306fdde03146103eb578063081812fc1461040d57600080fd5b806301e669721461034457806301ffc9a714610366578063049c5c491461039b575b600080fd5b34801561035057600080fd5b5061036461035f366004613038565b610999565b005b34801561037257600080fd5b50610386610381366004612ffe565b6109f7565b60405190151581526020015b60405180910390f35b3480156103a757600080fd5b50610364610a3b565b3480156103bc57600080fd5b506103dd6103cb366004612d7d565b600d6020526000908152604090205481565b604051908152602001610392565b3480156103f757600080fd5b50610400610aa0565b60405161039291906131ee565b34801561041957600080fd5b5061042d6104283660046130aa565b610b32565b6040516001600160a01b039091168152602001610392565b34801561045157600080fd5b50610364610460366004612f26565b610bc7565b34801561047157600080fd5b50610364610480366004613038565b610cf4565b34801561049157600080fd5b506103646104a0366004612f50565b610d48565b3480156104b157600080fd5b506008546103dd565b3480156104c657600080fd5b506103dd605881565b3480156104db57600080fd5b506103dd60135481565b3480156104f157600080fd5b50610364610500366004612dd2565b610edb565b34801561051157600080fd5b506103dd610520366004612f26565b610f62565b34801561053157600080fd5b5061036461100a565b34801561054657600080fd5b50610364610555366004612dd2565b6110d0565b34801561056657600080fd5b506103dd611f4081565b34801561057c57600080fd5b506103dd61058b3660046130aa565b6110eb565b34801561059c57600080fd5b506103646105ab366004613038565b61118f565b3480156105bc57600080fd5b50601654610100900460ff16610386565b3480156105d957600080fd5b506103dd6111e3565b3480156105ee57600080fd5b506103dd60155481565b34801561060457600080fd5b506103dd610613366004612d7d565b6001600160a01b03166000908152600c602052604090205490565b34801561063a57600080fd5b50610364610649366004612f92565b611200565b34801561065a57600080fd5b5060165460ff16610386565b34801561067257600080fd5b5061042d6106813660046130aa565b611364565b34801561069257600080fd5b506103dd6106a1366004612d7d565b6113ef565b3480156106b257600080fd5b50610364611489565b3480156106c757600080fd5b506103646114dd565b6103646106de3660046130aa565b611539565b3480156106ef57600080fd5b506016546103869060ff1681565b34801561070957600080fd5b50600a546001600160a01b031661042d565b34801561072757600080fd5b50610364610736366004613038565b611855565b34801561074757600080fd5b506103dd60145481565b34801561075d57600080fd5b506104006118a9565b34801561077257600080fd5b506103dd610781366004612d7d565b600c6020526000908152604090205481565b34801561079f57600080fd5b506103dd6107ae366004612d7d565b600b6020526000908152604090205481565b3480156107cc57600080fd5b506103866107db366004612d7d565b6001600160a01b03166000908152600b6020526040902054151590565b34801561080457600080fd5b50610364610813366004612eea565b6118b8565b34801561082457600080fd5b506103dd61032081565b34801561083a57600080fd5b506103dd67011c37937e08000081565b34801561085657600080fd5b50610364610865366004612f50565b61197d565b34801561087657600080fd5b50610364610885366004612e0e565b611a6a565b34801561089657600080fd5b506104006108a53660046130aa565b611af8565b6103646108b83660046130aa565b611c36565b3480156108c957600080fd5b506103dd600581565b3480156108de57600080fd5b5060165461038690610100900460ff1681565b3480156108fd57600080fd5b506103dd600381565b34801561091257600080fd5b50610400611f7e565b34801561092757600080fd5b50610386610936366004612d9f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561097057600080fd5b5061036461097f366004612d7d565b611f8d565b34801561099057600080fd5b5061040061205a565b600a546001600160a01b031633146109e65760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064015b60405180910390fd5b6109f260108383612c7c565b505050565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610a355750610a35826120e8565b92915050565b600a546001600160a01b03163314610a835760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6016805461ff001981166101009182900460ff1615909102179055565b606060008054610aaf9061328f565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb9061328f565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610bab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109dd565b506000908152600460205260409020546001600160a01b031690565b6000610bd282611364565b9050806001600160a01b0316836001600160a01b03161415610c5c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109dd565b336001600160a01b0382161480610c785750610c788133610936565b610cea5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109dd565b6109f28383612183565b600a546001600160a01b03163314610d3c5760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6109f260128383612c7c565b600a546001600160a01b03163314610d905760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b610320610da0611f406058613201565b610daa9190613201565b81610db460085490565b610dbe9190613201565b1115610e0c5760405162461bcd60e51b815260206004820152600860248201527f4d41585f4d494e5400000000000000000000000000000000000000000000000060448201526064016109dd565b601354605890610e1d908390613201565b1115610e6b5760405162461bcd60e51b815260206004820152600b60248201527f47494654535f454d50545900000000000000000000000000000000000000000060448201526064016109dd565b60005b818110156109f25760138054906000610e86836132ca565b9190505550610ec9838383818110610ea057610ea061333b565b9050602002016020810190610eb59190612d7d565b6008545b610ec4906001613201565b6121fe565b80610ed3816132ca565b915050610e6e565b610ee53382612218565b610f575760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109dd565b6109f283838361230f565b6000610f6d836113ef565b8210610fe15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109dd565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146110525760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6011546001600160a01b03166108fc600561106e47600261322d565b6110789190613219565b6040518115909202916000818181858888f193505050501580156110a0573d6000803e3d6000fd5b5060405133904780156108fc02916000818181858888f193505050501580156110cd573d6000803e3d6000fd5b50565b6109f283838360405180602001604052806000815250611a6a565b60006110f660085490565b821061116a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109dd565b6008828154811061117d5761117d61333b565b90600052602060002001549050919050565b600a546001600160a01b031633146111d75760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6109f2600f8383612c7c565b6103206111f3611f406058613201565b6111fd9190613201565b81565b600a546001600160a01b031633146112485760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b8281146112975760405162461bcd60e51b815260206004820152600e60248201527f444946464552454e545f53495a4500000000000000000000000000000000000060448201526064016109dd565b60005b8381101561135d5760008585838181106112b6576112b661333b565b90506020020160208101906112cb9190612d7d565b90506001600160a01b0381166113125760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109dd565b8383838181106113245761132461333b565b6001600160a01b039093166000908152600b60209081526040909120930291909101359091555080611355816132ca565b91505061129a565b5050505050565b6000818152600260205260408120546001600160a01b031680610a355760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109dd565b60006001600160a01b03821661146d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109dd565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146114d15760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6114db60006124f4565b565b600a546001600160a01b031633146115255760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6016805460ff19811660ff90911615179055565b601654610100900460ff16158015611553575060165460ff165b61159f5760405162461bcd60e51b815260206004820152601560248201527f5468652070726573616c6520697320636c6f736564000000000000000000000060448201526064016109dd565b336000908152600b60205260409020546116215760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f74207175616c696669656420666f722074686520707260448201527f6573616c6500000000000000000000000000000000000000000000000000000060648201526084016109dd565b610320611631611f406058613201565b61163b9190613201565b6008541061168b5760405162461bcd60e51b815260206004820152601660248201527f416c6c2041766172696b7320617265206d696e7465640000000000000000000060448201526064016109dd565b6103208160155461169c9190613201565b11156117105760405162461bcd60e51b815260206004820152602b60248201527f4d696e74696e6720776f756c6420657863656564207468652070726573616c6560448201527f20616c6c6f636174696f6e00000000000000000000000000000000000000000060648201526084016109dd565b336000908152600b6020908152604080832054600c90925290912054611737908390613201565b11156117915760405162461bcd60e51b8152602060048201526024808201527f596f752063616e206e6f74206d696e742065786365656473206d6178696d756d6044820152630813919560e21b60648201526084016109dd565b346117a48267011c37937e08000061322d565b11156117f25760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109dd565b60005b81811015611851576015805490600061180d836132ca565b9091555050336000908152600c6020526040812080549161182d836132ca565b919050555061183f33610eb960085490565b80611849816132ca565b9150506117f5565b5050565b600a546001600160a01b0316331461189d5760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6109f2600e8383612c7c565b606060018054610aaf9061328f565b6001600160a01b0382163314156119115760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109dd565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a546001600160a01b031633146119c55760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b60005b818110156109f25760008383838181106119e4576119e461333b565b90506020020160208101906119f99190612d7d565b90506001600160a01b038116611a405760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109dd565b6001600160a01b03166000908152600b602052604081205580611a62816132ca565b9150506119c8565b611a743383612218565b611ae65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109dd565b611af284848484612553565b50505050565b6000818152600260205260409020546060906001600160a01b0316611b5f5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207175657279206e6f6e2d6578697374656e7420746f6b656e0060448201526064016109dd565b6000600f8054611b6e9061328f565b905011611c055760108054611b829061328f565b80601f0160208091040260200160405190810160405280929190818152602001828054611bae9061328f565b8015611bfb5780601f10611bd057610100808354040283529160200191611bfb565b820191906000526020600020905b815481529060010190602001808311611bde57829003601f168201915b5050505050610a35565b600f611c10836125d1565b604051602001611c2192919061310b565b60405160208183030381529060405292915050565b601654610100900460ff16611c8d5760405162461bcd60e51b815260206004820152601060248201527f53616c65206973206e6f74206c6976650000000000000000000000000000000060448201526064016109dd565b60165460ff1615611ce05760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792070726573616c6572732063616e206275790000000000000000000060448201526064016109dd565b610320611cf0611f406058613201565b611cfa9190613201565b60085410611d4a5760405162461bcd60e51b815260206004820152601660248201527f416c6c2041766172696b7320617265206d696e7465640000000000000000000060448201526064016109dd565b611f4081601454611d5b9190613201565b1115611dcf5760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e6720776f756c642065786365656420746865206d61782070756260448201527f696320737570706c79000000000000000000000000000000000000000000000060648201526084016109dd565b6003811115611e465760405162461bcd60e51b815260206004820152602c60248201527f596f752063616e206d696e7420757020746f20332041766172696b732070657260448201527f207472616e73616374696f6e000000000000000000000000000000000000000060648201526084016109dd565b336000908152600d6020526040902054600590611e64908390613201565b1115611ebe5760405162461bcd60e51b8152602060048201526024808201527f596f752063616e206e6f74206d696e742065786365656473206d6178696d756d6044820152630813919560e21b60648201526084016109dd565b34611ed18267011c37937e08000061322d565b1115611f1f5760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109dd565b60005b818110156118515760148054906000611f3a836132ca565b9091555050336000908152600d60205260408120805491611f5a836132ca565b9190505550611f6c33610eb960085490565b80611f76816132ca565b915050611f22565b6060600e8054610aaf9061328f565b600a546001600160a01b03163314611fd55760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6001600160a01b0381166120515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109dd565b6110cd816124f4565b601280546120679061328f565b80601f01602080910402602001604051908101604052809291908181526020018280546120939061328f565b80156120e05780601f106120b5576101008083540402835291602001916120e0565b820191906000526020600020905b8154815290600101906020018083116120c357829003601f168201915b505050505081565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061214b57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a3557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a35565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906121c582611364565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611851828260405180602001604052806000815250612703565b6000818152600260205260408120546001600160a01b03166122915760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109dd565b600061229c83611364565b9050806001600160a01b0316846001600160a01b031614806122d75750836001600160a01b03166122cc84610b32565b6001600160a01b0316145b8061230757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661232282611364565b6001600160a01b03161461239e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109dd565b6001600160a01b0382166124195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109dd565b612424838383612781565b61242f600082612183565b6001600160a01b038316600090815260036020526040812080546001929061245890849061324c565b90915550506001600160a01b0382166000908152600360205260408120805460019290612486908490613201565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61255e84848461230f565b61256a84848484612839565b611af25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109dd565b60608161261157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561263b5780612625816132ca565b91506126349050600a83613219565b9150612615565b60008167ffffffffffffffff81111561265657612656613351565b6040519080825280601f01601f191660200182016040528015612680576020820181803683370190505b5090505b84156123075761269560018361324c565b91506126a2600a866132e5565b6126ad906030613201565b60f81b8183815181106126c2576126c261333b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506126fc600a86613219565b9450612684565b61270d8383612991565b61271a6000848484612839565b6109f25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109dd565b6001600160a01b0383166127dc576127d781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6127ff565b816001600160a01b0316836001600160a01b0316146127ff576127ff8382612aec565b6001600160a01b038216612816576109f281612b89565b826001600160a01b0316826001600160a01b0316146109f2576109f28282612c38565b60006001600160a01b0384163b1561298657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061287d9033908990889088906004016131b2565b602060405180830381600087803b15801561289757600080fd5b505af19250505080156128c7575060408051601f3d908101601f191682019092526128c49181019061301b565b60015b61296c573d8080156128f5576040519150601f19603f3d011682016040523d82523d6000602084013e6128fa565b606091505b5080516129645760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109dd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612307565b506001949350505050565b6001600160a01b0382166129e75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109dd565b6000818152600260205260409020546001600160a01b031615612a4c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109dd565b612a5860008383612781565b6001600160a01b0382166000908152600360205260408120805460019290612a81908490613201565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612af9846113ef565b612b03919061324c565b600083815260076020526040902054909150808214612b56576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612b9b9060019061324c565b60008381526009602052604081205460088054939450909284908110612bc357612bc361333b565b906000526020600020015490508060088381548110612be457612be461333b565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612c1c57612c1c613325565b6001900381819060005260206000200160009055905550505050565b6000612c43836113ef565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612c889061328f565b90600052602060002090601f016020900481019282612caa5760008555612cf0565b82601f10612cc35782800160ff19823516178555612cf0565b82800160010185558215612cf0579182015b82811115612cf0578235825591602001919060010190612cd5565b50612cfc929150612d00565b5090565b5b80821115612cfc5760008155600101612d01565b80356001600160a01b0381168114612d2c57600080fd5b919050565b60008083601f840112612d4357600080fd5b50813567ffffffffffffffff811115612d5b57600080fd5b6020830191508360208260051b8501011115612d7657600080fd5b9250929050565b600060208284031215612d8f57600080fd5b612d9882612d15565b9392505050565b60008060408385031215612db257600080fd5b612dbb83612d15565b9150612dc960208401612d15565b90509250929050565b600080600060608486031215612de757600080fd5b612df084612d15565b9250612dfe60208501612d15565b9150604084013590509250925092565b60008060008060808587031215612e2457600080fd5b612e2d85612d15565b9350612e3b60208601612d15565b925060408501359150606085013567ffffffffffffffff80821115612e5f57600080fd5b818701915087601f830112612e7357600080fd5b813581811115612e8557612e85613351565b604051601f8201601f19908116603f01168101908382118183101715612ead57612ead613351565b816040528281528a6020848701011115612ec657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612efd57600080fd5b612f0683612d15565b915060208301358015158114612f1b57600080fd5b809150509250929050565b60008060408385031215612f3957600080fd5b612f4283612d15565b946020939093013593505050565b60008060208385031215612f6357600080fd5b823567ffffffffffffffff811115612f7a57600080fd5b612f8685828601612d31565b90969095509350505050565b60008060008060408587031215612fa857600080fd5b843567ffffffffffffffff80821115612fc057600080fd5b612fcc88838901612d31565b90965094506020870135915080821115612fe557600080fd5b50612ff287828801612d31565b95989497509550505050565b60006020828403121561301057600080fd5b8135612d9881613367565b60006020828403121561302d57600080fd5b8151612d9881613367565b6000806020838503121561304b57600080fd5b823567ffffffffffffffff8082111561306357600080fd5b818501915085601f83011261307757600080fd5b81358181111561308657600080fd5b86602082850101111561309857600080fd5b60209290920196919550909350505050565b6000602082840312156130bc57600080fd5b5035919050565b600081518084526130db816020860160208601613263565b601f01601f19169290920160200192915050565b60008151613101818560208601613263565b9290920192915050565b600080845481600182811c91508083168061312757607f831692505b602080841082141561314757634e487b7160e01b86526022600452602486fd5b81801561315b576001811461316c57613199565b60ff19861689528489019650613199565b60008b81526020902060005b868110156131915781548b820152908501908301613178565b505084890196505b5050505050506131a981856130ef565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131e460808301846130c3565b9695505050505050565b602081526000612d9860208301846130c3565b60008219821115613214576132146132f9565b500190565b6000826132285761322861330f565b500490565b6000816000190483118215151615613247576132476132f9565b500290565b60008282101561325e5761325e6132f9565b500390565b60005b8381101561327e578181015183820152602001613266565b83811115611af25750506000910152565b600181811c908216806132a357607f821691505b602082108114156132c457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132de576132de6132f9565b5060010190565b6000826132f4576132f461330f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146110cd57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d23e1b533d88b23f7c6dd674d223a2f2a6a19a4faac1cbba2d3a5bd77a555b4364736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061033f5760003560e01c806370a08231116101b0578063ab0923b7116100ec578063e051ce9711610095578063e8a3d4851161006f578063e8a3d48514610906578063e985e9c51461091b578063f2fde38b14610964578063faf924cf1461098457600080fd5b8063e051ce97146108bd578063e081b781146108d2578063e44c6a9a146108f157600080fd5b8063b88d4fde116100c6578063b88d4fde1461086a578063c87b56dd1461088a578063d96a094a146108aa57600080fd5b8063ab0923b714610818578063acdea1181461082e578063b179e0601461084a57600080fd5b8063938e3d7b116101595780639bf80316116101335780639bf80316146107665780639cf2e8d6146107935780639e273b2f146107c0578063a22cb465146107f857600080fd5b8063938e3d7b1461071b578063940f1ada1461073b57806395d89b411461075157600080fd5b8063815f7bbd1161018a578063815f7bbd146106d057806383a9e049146106e35780638da5cb5b146106fd57600080fd5b806370a0823114610686578063715018a6146106a65780637bffb4ce146106bb57600080fd5b80632f745c591161027f578063564566a8116102285780635ce7af1f116102025780635ce7af1f146105f85780635e3910901461062e57806360d938dc1461064e5780636352211e1461066657600080fd5b8063564566a8146105b05780635663c108146105cd57806359a12ad5146105e257600080fd5b80634eeeb14f116102595780634eeeb14f1461055a5780634f6ccce71461057057806355f804b31461059057600080fd5b80632f745c59146105055780633ccfd60b1461052557806342842e0e1461053a57600080fd5b8063095ea7b3116102ec57806318160ddd116102c657806318160ddd146104a557806318e06839146104ba5780631b57190e146104cf57806323b872dd146104e557600080fd5b8063095ea7b3146104455780631096952314610465578063163e1e611461048557600080fd5b806305af57321161031d57806305af5732146103b057806306fdde03146103eb578063081812fc1461040d57600080fd5b806301e669721461034457806301ffc9a714610366578063049c5c491461039b575b600080fd5b34801561035057600080fd5b5061036461035f366004613038565b610999565b005b34801561037257600080fd5b50610386610381366004612ffe565b6109f7565b60405190151581526020015b60405180910390f35b3480156103a757600080fd5b50610364610a3b565b3480156103bc57600080fd5b506103dd6103cb366004612d7d565b600d6020526000908152604090205481565b604051908152602001610392565b3480156103f757600080fd5b50610400610aa0565b60405161039291906131ee565b34801561041957600080fd5b5061042d6104283660046130aa565b610b32565b6040516001600160a01b039091168152602001610392565b34801561045157600080fd5b50610364610460366004612f26565b610bc7565b34801561047157600080fd5b50610364610480366004613038565b610cf4565b34801561049157600080fd5b506103646104a0366004612f50565b610d48565b3480156104b157600080fd5b506008546103dd565b3480156104c657600080fd5b506103dd605881565b3480156104db57600080fd5b506103dd60135481565b3480156104f157600080fd5b50610364610500366004612dd2565b610edb565b34801561051157600080fd5b506103dd610520366004612f26565b610f62565b34801561053157600080fd5b5061036461100a565b34801561054657600080fd5b50610364610555366004612dd2565b6110d0565b34801561056657600080fd5b506103dd611f4081565b34801561057c57600080fd5b506103dd61058b3660046130aa565b6110eb565b34801561059c57600080fd5b506103646105ab366004613038565b61118f565b3480156105bc57600080fd5b50601654610100900460ff16610386565b3480156105d957600080fd5b506103dd6111e3565b3480156105ee57600080fd5b506103dd60155481565b34801561060457600080fd5b506103dd610613366004612d7d565b6001600160a01b03166000908152600c602052604090205490565b34801561063a57600080fd5b50610364610649366004612f92565b611200565b34801561065a57600080fd5b5060165460ff16610386565b34801561067257600080fd5b5061042d6106813660046130aa565b611364565b34801561069257600080fd5b506103dd6106a1366004612d7d565b6113ef565b3480156106b257600080fd5b50610364611489565b3480156106c757600080fd5b506103646114dd565b6103646106de3660046130aa565b611539565b3480156106ef57600080fd5b506016546103869060ff1681565b34801561070957600080fd5b50600a546001600160a01b031661042d565b34801561072757600080fd5b50610364610736366004613038565b611855565b34801561074757600080fd5b506103dd60145481565b34801561075d57600080fd5b506104006118a9565b34801561077257600080fd5b506103dd610781366004612d7d565b600c6020526000908152604090205481565b34801561079f57600080fd5b506103dd6107ae366004612d7d565b600b6020526000908152604090205481565b3480156107cc57600080fd5b506103866107db366004612d7d565b6001600160a01b03166000908152600b6020526040902054151590565b34801561080457600080fd5b50610364610813366004612eea565b6118b8565b34801561082457600080fd5b506103dd61032081565b34801561083a57600080fd5b506103dd67011c37937e08000081565b34801561085657600080fd5b50610364610865366004612f50565b61197d565b34801561087657600080fd5b50610364610885366004612e0e565b611a6a565b34801561089657600080fd5b506104006108a53660046130aa565b611af8565b6103646108b83660046130aa565b611c36565b3480156108c957600080fd5b506103dd600581565b3480156108de57600080fd5b5060165461038690610100900460ff1681565b3480156108fd57600080fd5b506103dd600381565b34801561091257600080fd5b50610400611f7e565b34801561092757600080fd5b50610386610936366004612d9f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561097057600080fd5b5061036461097f366004612d7d565b611f8d565b34801561099057600080fd5b5061040061205a565b600a546001600160a01b031633146109e65760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064015b60405180910390fd5b6109f260108383612c7c565b505050565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610a355750610a35826120e8565b92915050565b600a546001600160a01b03163314610a835760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6016805461ff001981166101009182900460ff1615909102179055565b606060008054610aaf9061328f565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb9061328f565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610bab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109dd565b506000908152600460205260409020546001600160a01b031690565b6000610bd282611364565b9050806001600160a01b0316836001600160a01b03161415610c5c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109dd565b336001600160a01b0382161480610c785750610c788133610936565b610cea5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109dd565b6109f28383612183565b600a546001600160a01b03163314610d3c5760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6109f260128383612c7c565b600a546001600160a01b03163314610d905760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b610320610da0611f406058613201565b610daa9190613201565b81610db460085490565b610dbe9190613201565b1115610e0c5760405162461bcd60e51b815260206004820152600860248201527f4d41585f4d494e5400000000000000000000000000000000000000000000000060448201526064016109dd565b601354605890610e1d908390613201565b1115610e6b5760405162461bcd60e51b815260206004820152600b60248201527f47494654535f454d50545900000000000000000000000000000000000000000060448201526064016109dd565b60005b818110156109f25760138054906000610e86836132ca565b9190505550610ec9838383818110610ea057610ea061333b565b9050602002016020810190610eb59190612d7d565b6008545b610ec4906001613201565b6121fe565b80610ed3816132ca565b915050610e6e565b610ee53382612218565b610f575760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109dd565b6109f283838361230f565b6000610f6d836113ef565b8210610fe15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109dd565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146110525760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6011546001600160a01b03166108fc600561106e47600261322d565b6110789190613219565b6040518115909202916000818181858888f193505050501580156110a0573d6000803e3d6000fd5b5060405133904780156108fc02916000818181858888f193505050501580156110cd573d6000803e3d6000fd5b50565b6109f283838360405180602001604052806000815250611a6a565b60006110f660085490565b821061116a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109dd565b6008828154811061117d5761117d61333b565b90600052602060002001549050919050565b600a546001600160a01b031633146111d75760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6109f2600f8383612c7c565b6103206111f3611f406058613201565b6111fd9190613201565b81565b600a546001600160a01b031633146112485760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b8281146112975760405162461bcd60e51b815260206004820152600e60248201527f444946464552454e545f53495a4500000000000000000000000000000000000060448201526064016109dd565b60005b8381101561135d5760008585838181106112b6576112b661333b565b90506020020160208101906112cb9190612d7d565b90506001600160a01b0381166113125760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109dd565b8383838181106113245761132461333b565b6001600160a01b039093166000908152600b60209081526040909120930291909101359091555080611355816132ca565b91505061129a565b5050505050565b6000818152600260205260408120546001600160a01b031680610a355760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109dd565b60006001600160a01b03821661146d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109dd565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146114d15760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6114db60006124f4565b565b600a546001600160a01b031633146115255760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6016805460ff19811660ff90911615179055565b601654610100900460ff16158015611553575060165460ff165b61159f5760405162461bcd60e51b815260206004820152601560248201527f5468652070726573616c6520697320636c6f736564000000000000000000000060448201526064016109dd565b336000908152600b60205260409020546116215760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f74207175616c696669656420666f722074686520707260448201527f6573616c6500000000000000000000000000000000000000000000000000000060648201526084016109dd565b610320611631611f406058613201565b61163b9190613201565b6008541061168b5760405162461bcd60e51b815260206004820152601660248201527f416c6c2041766172696b7320617265206d696e7465640000000000000000000060448201526064016109dd565b6103208160155461169c9190613201565b11156117105760405162461bcd60e51b815260206004820152602b60248201527f4d696e74696e6720776f756c6420657863656564207468652070726573616c6560448201527f20616c6c6f636174696f6e00000000000000000000000000000000000000000060648201526084016109dd565b336000908152600b6020908152604080832054600c90925290912054611737908390613201565b11156117915760405162461bcd60e51b8152602060048201526024808201527f596f752063616e206e6f74206d696e742065786365656473206d6178696d756d6044820152630813919560e21b60648201526084016109dd565b346117a48267011c37937e08000061322d565b11156117f25760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109dd565b60005b81811015611851576015805490600061180d836132ca565b9091555050336000908152600c6020526040812080549161182d836132ca565b919050555061183f33610eb960085490565b80611849816132ca565b9150506117f5565b5050565b600a546001600160a01b0316331461189d5760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6109f2600e8383612c7c565b606060018054610aaf9061328f565b6001600160a01b0382163314156119115760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109dd565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a546001600160a01b031633146119c55760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b60005b818110156109f25760008383838181106119e4576119e461333b565b90506020020160208101906119f99190612d7d565b90506001600160a01b038116611a405760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109dd565b6001600160a01b03166000908152600b602052604081205580611a62816132ca565b9150506119c8565b611a743383612218565b611ae65760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109dd565b611af284848484612553565b50505050565b6000818152600260205260409020546060906001600160a01b0316611b5f5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207175657279206e6f6e2d6578697374656e7420746f6b656e0060448201526064016109dd565b6000600f8054611b6e9061328f565b905011611c055760108054611b829061328f565b80601f0160208091040260200160405190810160405280929190818152602001828054611bae9061328f565b8015611bfb5780601f10611bd057610100808354040283529160200191611bfb565b820191906000526020600020905b815481529060010190602001808311611bde57829003601f168201915b5050505050610a35565b600f611c10836125d1565b604051602001611c2192919061310b565b60405160208183030381529060405292915050565b601654610100900460ff16611c8d5760405162461bcd60e51b815260206004820152601060248201527f53616c65206973206e6f74206c6976650000000000000000000000000000000060448201526064016109dd565b60165460ff1615611ce05760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792070726573616c6572732063616e206275790000000000000000000060448201526064016109dd565b610320611cf0611f406058613201565b611cfa9190613201565b60085410611d4a5760405162461bcd60e51b815260206004820152601660248201527f416c6c2041766172696b7320617265206d696e7465640000000000000000000060448201526064016109dd565b611f4081601454611d5b9190613201565b1115611dcf5760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e6720776f756c642065786365656420746865206d61782070756260448201527f696320737570706c79000000000000000000000000000000000000000000000060648201526084016109dd565b6003811115611e465760405162461bcd60e51b815260206004820152602c60248201527f596f752063616e206d696e7420757020746f20332041766172696b732070657260448201527f207472616e73616374696f6e000000000000000000000000000000000000000060648201526084016109dd565b336000908152600d6020526040902054600590611e64908390613201565b1115611ebe5760405162461bcd60e51b8152602060048201526024808201527f596f752063616e206e6f74206d696e742065786365656473206d6178696d756d6044820152630813919560e21b60648201526084016109dd565b34611ed18267011c37937e08000061322d565b1115611f1f5760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109dd565b60005b818110156118515760148054906000611f3a836132ca565b9091555050336000908152600d60205260408120805491611f5a836132ca565b9190505550611f6c33610eb960085490565b80611f76816132ca565b915050611f22565b6060600e8054610aaf9061328f565b600a546001600160a01b03163314611fd55760405162461bcd60e51b8152602060048201819052602482015260008051602061337e83398151915260448201526064016109dd565b6001600160a01b0381166120515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109dd565b6110cd816124f4565b601280546120679061328f565b80601f01602080910402602001604051908101604052809291908181526020018280546120939061328f565b80156120e05780601f106120b5576101008083540402835291602001916120e0565b820191906000526020600020905b8154815290600101906020018083116120c357829003601f168201915b505050505081565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061214b57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a3557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a35565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906121c582611364565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611851828260405180602001604052806000815250612703565b6000818152600260205260408120546001600160a01b03166122915760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109dd565b600061229c83611364565b9050806001600160a01b0316846001600160a01b031614806122d75750836001600160a01b03166122cc84610b32565b6001600160a01b0316145b8061230757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661232282611364565b6001600160a01b03161461239e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109dd565b6001600160a01b0382166124195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109dd565b612424838383612781565b61242f600082612183565b6001600160a01b038316600090815260036020526040812080546001929061245890849061324c565b90915550506001600160a01b0382166000908152600360205260408120805460019290612486908490613201565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61255e84848461230f565b61256a84848484612839565b611af25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109dd565b60608161261157505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561263b5780612625816132ca565b91506126349050600a83613219565b9150612615565b60008167ffffffffffffffff81111561265657612656613351565b6040519080825280601f01601f191660200182016040528015612680576020820181803683370190505b5090505b84156123075761269560018361324c565b91506126a2600a866132e5565b6126ad906030613201565b60f81b8183815181106126c2576126c261333b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506126fc600a86613219565b9450612684565b61270d8383612991565b61271a6000848484612839565b6109f25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109dd565b6001600160a01b0383166127dc576127d781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6127ff565b816001600160a01b0316836001600160a01b0316146127ff576127ff8382612aec565b6001600160a01b038216612816576109f281612b89565b826001600160a01b0316826001600160a01b0316146109f2576109f28282612c38565b60006001600160a01b0384163b1561298657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061287d9033908990889088906004016131b2565b602060405180830381600087803b15801561289757600080fd5b505af19250505080156128c7575060408051601f3d908101601f191682019092526128c49181019061301b565b60015b61296c573d8080156128f5576040519150601f19603f3d011682016040523d82523d6000602084013e6128fa565b606091505b5080516129645760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109dd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612307565b506001949350505050565b6001600160a01b0382166129e75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109dd565b6000818152600260205260409020546001600160a01b031615612a4c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109dd565b612a5860008383612781565b6001600160a01b0382166000908152600360205260408120805460019290612a81908490613201565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612af9846113ef565b612b03919061324c565b600083815260076020526040902054909150808214612b56576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612b9b9060019061324c565b60008381526009602052604081205460088054939450909284908110612bc357612bc361333b565b906000526020600020015490508060088381548110612be457612be461333b565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612c1c57612c1c613325565b6001900381819060005260206000200160009055905550505050565b6000612c43836113ef565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612c889061328f565b90600052602060002090601f016020900481019282612caa5760008555612cf0565b82601f10612cc35782800160ff19823516178555612cf0565b82800160010185558215612cf0579182015b82811115612cf0578235825591602001919060010190612cd5565b50612cfc929150612d00565b5090565b5b80821115612cfc5760008155600101612d01565b80356001600160a01b0381168114612d2c57600080fd5b919050565b60008083601f840112612d4357600080fd5b50813567ffffffffffffffff811115612d5b57600080fd5b6020830191508360208260051b8501011115612d7657600080fd5b9250929050565b600060208284031215612d8f57600080fd5b612d9882612d15565b9392505050565b60008060408385031215612db257600080fd5b612dbb83612d15565b9150612dc960208401612d15565b90509250929050565b600080600060608486031215612de757600080fd5b612df084612d15565b9250612dfe60208501612d15565b9150604084013590509250925092565b60008060008060808587031215612e2457600080fd5b612e2d85612d15565b9350612e3b60208601612d15565b925060408501359150606085013567ffffffffffffffff80821115612e5f57600080fd5b818701915087601f830112612e7357600080fd5b813581811115612e8557612e85613351565b604051601f8201601f19908116603f01168101908382118183101715612ead57612ead613351565b816040528281528a6020848701011115612ec657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612efd57600080fd5b612f0683612d15565b915060208301358015158114612f1b57600080fd5b809150509250929050565b60008060408385031215612f3957600080fd5b612f4283612d15565b946020939093013593505050565b60008060208385031215612f6357600080fd5b823567ffffffffffffffff811115612f7a57600080fd5b612f8685828601612d31565b90969095509350505050565b60008060008060408587031215612fa857600080fd5b843567ffffffffffffffff80821115612fc057600080fd5b612fcc88838901612d31565b90965094506020870135915080821115612fe557600080fd5b50612ff287828801612d31565b95989497509550505050565b60006020828403121561301057600080fd5b8135612d9881613367565b60006020828403121561302d57600080fd5b8151612d9881613367565b6000806020838503121561304b57600080fd5b823567ffffffffffffffff8082111561306357600080fd5b818501915085601f83011261307757600080fd5b81358181111561308657600080fd5b86602082850101111561309857600080fd5b60209290920196919550909350505050565b6000602082840312156130bc57600080fd5b5035919050565b600081518084526130db816020860160208601613263565b601f01601f19169290920160200192915050565b60008151613101818560208601613263565b9290920192915050565b600080845481600182811c91508083168061312757607f831692505b602080841082141561314757634e487b7160e01b86526022600452602486fd5b81801561315b576001811461316c57613199565b60ff19861689528489019650613199565b60008b81526020902060005b868110156131915781548b820152908501908301613178565b505084890196505b5050505050506131a981856130ef565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131e460808301846130c3565b9695505050505050565b602081526000612d9860208301846130c3565b60008219821115613214576132146132f9565b500190565b6000826132285761322861330f565b500490565b6000816000190483118215151615613247576132476132f9565b500290565b60008282101561325e5761325e6132f9565b500390565b60005b8381101561327e578181015183820152602001613266565b83811115611af25750506000910152565b600181811c908216806132a357607f821691505b602082108114156132c457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132de576132de6132f9565b5060010190565b6000826132f4576132f461330f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146110cd57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d23e1b533d88b23f7c6dd674d223a2f2a6a19a4faac1cbba2d3a5bd77a555b4364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2048,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "presalerList",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2052,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "presalerListPurchases",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2056,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "salerListPurchases",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2058,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_contractURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2060,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2062,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_defaultBaseURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 2065,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "_artistAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2067,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "proof",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2069,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "giftedAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "publicAmountMinted",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2073,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "privateAmountMinted",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2075,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "presaleLive",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 2077,
        "contract": "contracts/AvarikSaga.sol:AvarikSaga",
        "label": "saleLive",
        "offset": 1,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
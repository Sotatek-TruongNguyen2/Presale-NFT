{
  "address": "0x4FCB448B3d8eA3131041A10B8420bB20FFF3E35F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SVS_GIFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVS_MAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVS_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVS_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVS_PRIVATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SVS_PUBLIC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "entries",
          "type": "address[]"
        }
      ],
      "name": "addToPresaleList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenQuantity",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giftedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isPresaler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenQuantity",
          "type": "uint256"
        }
      ],
      "name": "presaleBuy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presalePurchaseLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "presalePurchasedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presalerList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "presalerListPurchases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proof",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "entries",
          "type": "address[]"
        }
      ],
      "name": "removeFromPresaleList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setDefaultBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "hash",
          "type": "string"
        }
      ],
      "name": "setProvenanceHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePresaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81abdb413b2e10bf8f102a20610d39f192cef0277b82c8ff6c0b859f57ad760d",
  "receipt": {
    "to": null,
    "from": "0x9ef6eBF5A3E71d7f89eAdb94c8EA4293E64E4B4e",
    "contractAddress": "0x4FCB448B3d8eA3131041A10B8420bB20FFF3E35F",
    "transactionIndex": 38,
    "gasUsed": "2960414",
    "logsBloom": "0x
    "blockHash": "0x657a0e2e6897fc0dc4b181bb0513db9c9a5ffcf793440d6f6cbf7b9e4c08666a",
    "transactionHash": "0x81abdb413b2e10bf8f102a20610d39f192cef0277b82c8ff6c0b859f57ad760d",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 9245809,
        "transactionHash": "0x81abdb413b2e10bf8f102a20610d39f192cef0277b82c8ff6c0b859f57ad760d",
        "address": "0x4FCB448B3d8eA3131041A10B8420bB20FFF3E35F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009ef6ebf5a3e71d7f89eadb94c8ea4293e64e4b4e"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x657a0e2e6897fc0dc4b181bb0513db9c9a5ffcf793440d6f6cbf7b9e4c08666a"
      }
    ],
    "blockNumber": 9245809,
    "cumulativeGasUsed": "29671408",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "940fb915f4ae2a5930a92c06c4df683c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SVS_GIFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVS_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVS_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVS_PRIVATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SVS_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"entries\",\"type\":\"address[]\"}],\"name\":\"addToPresaleList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giftedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPresaler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"presaleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"presalePurchasedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presalerList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presalerListPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proof\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"entries\",\"type\":\"address[]\"}],\"name\":\"removeFromPresaleList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setDefaultBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"setProvenanceHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SneakyVampireSyndicate.sol\":\"SneakyVampireSyndicate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/SneakyVampireSyndicate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/*\\n     \\u2584\\u2588\\u2580\\u2580\\u2580\\u2588\\u2584\\u2588   \\u2580\\u2588\\u2588\\u2588\\u2588\\u2580   \\u2580\\u2588\\u2588\\u2588\\u2580    \\u2584\\u2588\\u2580\\u2580\\u2580\\u2588\\u2584\\u2588\\n    \\u2584\\u2588\\u2588    \\u2580\\u2588     \\u2580\\u2588\\u2588    \\u2584\\u2584\\u2588     \\u2584\\u2588\\u2588    \\u2580\\u2588\\n    \\u2580\\u2588\\u2588\\u2588\\u2584          \\u2588\\u2588\\u2584  \\u2584\\u2588\\u2588      \\u2580\\u2588\\u2588\\u2588\\u2584    \\n     \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584       \\u2588\\u2588\\u2584  \\u2584\\u2588        \\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2584\\n    \\u2584     \\u2580\\u2588\\u2588       \\u2580\\u2588\\u2588\\u2588\\u2588\\u2580       \\u2584     \\u2580\\u2588\\u2588\\n    \\u2588\\u2588     \\u2588\\u2588        \\u2584\\u2588\\u2588\\u2584        \\u2588\\u2588     \\u2588\\u2588\\n    \\u2588\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580          \\u2588\\u2588         \\u2588\\u2580\\u2588\\u2588\\u2588\\u2588\\u2588\\u2580 \\n    \\n      Sneaky Vampires Syndicate / 2021\\n*/\\n                                          \\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SneakyVampireSyndicate is ERC721Enumerable, Ownable {\\n    using Strings for uint256;\\n    \\n    uint256 public constant SVS_GIFT = 88;\\n    uint256 public constant SVS_PRIVATE = 800;\\n    uint256 public constant SVS_PUBLIC = 8000;\\n    uint256 public constant SVS_MAX = SVS_GIFT + SVS_PRIVATE + SVS_PUBLIC;\\n    uint256 public constant SVS_PRICE = 0.08 ether;\\n    uint256 public constant SVS_PER_MINT = 10;\\n    \\n    mapping(address => bool) public presalerList;\\n    mapping(address => uint256) public presalerListPurchases;\\n    \\n    string private _contractURI;\\n    string private _tokenBaseURI;\\n    string private _defaultBaseURI;\\n    address private _artistAddress = 0xea68212b0450A929B14726b90550933bC12fF813;\\n    \\n    string public proof;\\n    uint256 public giftedAmount;\\n    uint256 public publicAmountMinted;\\n    uint256 public privateAmountMinted;\\n    uint256 public presalePurchaseLimit = 2;\\n    bool public presaleLive;\\n    bool public saleLive;\\n    \\n    constructor() ERC721(\\\"Sneaky Vampire Syndicate\\\", \\\"SVS\\\") { }\\n    \\n    function addToPresaleList(address[] calldata entries) external onlyOwner {\\n        for(uint256 i = 0; i < entries.length; i++) {\\n            address entry = entries[i];\\n            require(entry != address(0), \\\"NULL_ADDRESS\\\");\\n            require(!presalerList[entry], \\\"DUPLICATE_ENTRY\\\");\\n\\n            presalerList[entry] = true;\\n        }   \\n    }\\n\\n    function removeFromPresaleList(address[] calldata entries) external onlyOwner {\\n        for(uint256 i = 0; i < entries.length; i++) {\\n            address entry = entries[i];\\n            require(entry != address(0), \\\"NULL_ADDRESS\\\");\\n            \\n            presalerList[entry] = false;\\n        }\\n    }\\n    \\n    function buy(uint256 tokenQuantity) external payable {\\n        require(saleLive, \\\"Sale is not live\\\");\\n        require(!presaleLive, \\\"Only presalers can buy\\\");\\n        require(totalSupply() < SVS_MAX, \\\"All Vampires are minted\\\");\\n        require(publicAmountMinted + tokenQuantity <= SVS_PUBLIC, \\\"Minting would exceed the max pubic supply\\\");\\n        require(tokenQuantity <= SVS_PER_MINT, \\\"You can mint up to 10 Vampires per transaction\\\");\\n        require(SVS_PRICE * tokenQuantity <= msg.value, \\\"Insufficient ETH sent\\\");\\n        \\n        for(uint256 i = 0; i < tokenQuantity; i++) {\\n            publicAmountMinted++;\\n            _safeMint(msg.sender, totalSupply() + 1);\\n        }\\n    }\\n    \\n    function presaleBuy(uint256 tokenQuantity) external payable {\\n        require(!saleLive && presaleLive, \\\"The presale is closed\\\");\\n        require(presalerList[msg.sender], \\\"You are not qualified for the presale\\\");\\n        require(totalSupply() < SVS_MAX, \\\"All Vampires are minted\\\");\\n        require(privateAmountMinted + tokenQuantity <= SVS_PRIVATE, \\\"Minting would exceed the presale allocation\\\");\\n        require(presalerListPurchases[msg.sender] + tokenQuantity <= presalePurchaseLimit, \\\"You can mint up to 2 Vampires in the presale\\\");\\n        require(SVS_PRICE * tokenQuantity <= msg.value, \\\"Insufficient ETH sent\\\");\\n        \\n        for (uint256 i = 0; i < tokenQuantity; i++) {\\n            privateAmountMinted++;\\n            presalerListPurchases[msg.sender]++;\\n            _safeMint(msg.sender, totalSupply() + 1);\\n        }\\n    }\\n    \\n    function gift(address[] calldata receivers) external onlyOwner {\\n        require(totalSupply() + receivers.length <= SVS_MAX, \\\"MAX_MINT\\\");\\n        require(giftedAmount + receivers.length <= SVS_GIFT, \\\"GIFTS_EMPTY\\\");\\n        \\n        for (uint256 i = 0; i < receivers.length; i++) {\\n            giftedAmount++;\\n            _safeMint(receivers[i], totalSupply() + 1);\\n        }\\n    }\\n    \\n    function withdraw() external onlyOwner {\\n        payable(_artistAddress).transfer(address(this).balance * 2 / 5);\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n    \\n    function isPresaler(address addr) external view returns (bool) {\\n        return presalerList[addr];\\n    }\\n    \\n    function presalePurchasedCount(address addr) external view returns (uint256) {\\n        return presalerListPurchases[addr];\\n    }\\n\\n    function isSaleActive() external view returns(bool) {\\n        return saleLive;\\n    }\\n    \\n    function isPresaleActive() external view returns(bool) {\\n        return presaleLive;\\n    }\\n    // Owner functions for enabling presale, sale, revealing and setting the provenance hash\\n    function togglePresaleStatus() external onlyOwner {\\n        presaleLive = !presaleLive;\\n    }\\n    \\n    function toggleSaleStatus() external onlyOwner {\\n        saleLive = !saleLive;\\n    }\\n    \\n    function setProvenanceHash(string calldata hash) external onlyOwner {\\n        proof = hash;\\n    }\\n    \\n    function setContractURI(string calldata URI) external onlyOwner {\\n        _contractURI = URI;\\n    }\\n    \\n    function setBaseURI(string calldata URI) external onlyOwner {\\n        _tokenBaseURI = URI;\\n    }\\n    \\n    function setDefaultBaseURI(string calldata URI) external onlyOwner {\\n        _defaultBaseURI = URI;\\n    }\\n    \\n    // aWYgeW91IHJlYWQgdGhpcywgc2VuZCBGcmVkZXJpayMwMDAxLCAiZnJlZGR5IGlzIGJpZyI=\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n    \\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n        require(_exists(tokenId), \\\"Cannot query non-existent token\\\");\\n        \\n        return bytes(_tokenBaseURI).length > 0 ? string(abi.encodePacked(_tokenBaseURI, tokenId.toString())) : _defaultBaseURI;\\n    }\\n}\",\"keccak256\":\"0xb1670d9b38f865792fe9456f692f8fd0024193c0975e30e781dc8f54df6c1570\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601080546001600160a01b03191673ea68212b0450a929b14726b90550933bc12ff81317905560026015553480156200003c57600080fd5b50604080518082018252601881527f536e65616b792056616d706972652053796e646963617465000000000000000060208083019182528351808501909452600384526253565360e81b9084015281519192916200009d916000916200012c565b508051620000b39060019060208401906200012c565b505050620000d0620000ca620000d660201b60201c565b620000da565b6200020f565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200013a90620001d2565b90600052602060002090601f0160209004810192826200015e5760008555620001a9565b82601f106200017957805160ff1916838001178555620001a9565b82800160010185558215620001a9579182015b82811115620001a95782518255916020019190600101906200018c565b50620001b7929150620001bb565b5090565b5b80821115620001b75760008155600101620001bc565b600181811c90821680620001e757607f821691505b602082108114156200020957634e487b7160e01b600052602260045260246000fd5b50919050565b613288806200021f6000396000f3fe6080604052600436106103345760003560e01c8063730f8c65116101b0578063a29714da116100ec578063e081b78111610095578063f2fde38b1161006f578063f2fde38b14610906578063f474307014610926578063fac2e3c11461093c578063faf924cf1461095157600080fd5b8063e081b78114610889578063e8a3d485146108a8578063e985e9c5146108bd57600080fd5b8063c87b56dd116100c6578063c87b56dd14610841578063d96a094a14610861578063dbf314cc1461087457600080fd5b8063a29714da146107eb578063b179e06014610801578063b88d4fde1461082157600080fd5b8063938e3d7b116101595780639bf80316116101335780639bf80316146107355780639cf2e8d6146107625780639e273b2f14610792578063a22cb465146107cb57600080fd5b8063938e3d7b146106ea578063940f1ada1461070a57806395d89b411461072057600080fd5b8063815f7bbd1161018a578063815f7bbd1461069f57806383a9e049146106b25780638da5cb5b146106cc57600080fd5b8063730f8c651461065f5780637bffb4ce146106745780637ed32dad1461068957600080fd5b80632f745c591161027f57806359a12ad5116102285780636352211e116102025780636352211e146105ea57806370a082311461060a578063715018a61461062a5780637204a3c91461063f57600080fd5b806359a12ad5146105865780635ce7af1f1461059c57806360d938dc146105d257600080fd5b80634f6ccce7116102595780634f6ccce71461052957806355f804b314610549578063564566a81461056957600080fd5b80632f745c59146104d45780633ccfd60b146104f457806342842e0e1461050957600080fd5b8063095ea7b3116102e157806318160ddd116102bb57806318160ddd146104895780631b57190e1461049e57806323b872dd146104b457600080fd5b8063095ea7b3146104295780631096952314610449578063163e1e611461046957600080fd5b806306fdde031161031257806306fdde03146103a5578063081812fc146103c757806308333598146103ff57600080fd5b806301e669721461033957806301ffc9a71461035b578063049c5c4914610390575b600080fd5b34801561034557600080fd5b50610359610354366004612eff565b610966565b005b34801561036757600080fd5b5061037b610376366004612ec5565b6109c4565b60405190151581526020015b60405180910390f35b34801561039c57600080fd5b50610359610a08565b3480156103b157600080fd5b506103ba610a6d565b60405161038791906130a3565b3480156103d357600080fd5b506103e76103e2366004612f5f565b610aff565b6040516001600160a01b039091168152602001610387565b34801561040b57600080fd5b5061041b67011c37937e08000081565b604051908152602001610387565b34801561043557600080fd5b50610359610444366004612e26565b610b94565b34801561045557600080fd5b50610359610464366004612eff565b610cc1565b34801561047557600080fd5b50610359610484366004612e50565b610d15565b34801561049557600080fd5b5060085461041b565b3480156104aa57600080fd5b5061041b60125481565b3480156104c057600080fd5b506103596104cf366004612cd2565b610ea8565b3480156104e057600080fd5b5061041b6104ef366004612e26565b610f2f565b34801561050057600080fd5b50610359610fd7565b34801561051557600080fd5b50610359610524366004612cd2565b61109d565b34801561053557600080fd5b5061041b610544366004612f5f565b6110b8565b34801561055557600080fd5b50610359610564366004612eff565b61115c565b34801561057557600080fd5b50601654610100900460ff1661037b565b34801561059257600080fd5b5061041b60145481565b3480156105a857600080fd5b5061041b6105b7366004612c7d565b6001600160a01b03166000908152600c602052604090205490565b3480156105de57600080fd5b5060165460ff1661037b565b3480156105f657600080fd5b506103e7610605366004612f5f565b6111b0565b34801561061657600080fd5b5061041b610625366004612c7d565b61123b565b34801561063657600080fd5b506103596112d5565b34801561064b57600080fd5b5061035961065a366004612e50565b611329565b34801561066b57600080fd5b5061041b600a81565b34801561068057600080fd5b50610359611489565b34801561069557600080fd5b5061041b611f4081565b6103596106ad366004612f5f565b6114e5565b3480156106be57600080fd5b5060165461037b9060ff1681565b3480156106d857600080fd5b50600a546001600160a01b03166103e7565b3480156106f657600080fd5b50610359610705366004612eff565b611815565b34801561071657600080fd5b5061041b60135481565b34801561072c57600080fd5b506103ba611869565b34801561074157600080fd5b5061041b610750366004612c7d565b600c6020526000908152604090205481565b34801561076e57600080fd5b5061037b61077d366004612c7d565b600b6020526000908152604090205460ff1681565b34801561079e57600080fd5b5061037b6107ad366004612c7d565b6001600160a01b03166000908152600b602052604090205460ff1690565b3480156107d757600080fd5b506103596107e6366004612dea565b611878565b3480156107f757600080fd5b5061041b61032081565b34801561080d57600080fd5b5061035961081c366004612e50565b61193d565b34801561082d57600080fd5b5061035961083c366004612d0e565b611a31565b34801561084d57600080fd5b506103ba61085c366004612f5f565b611abf565b61035961086f366004612f5f565b611bfd565b34801561088057600080fd5b5061041b611ead565b34801561089557600080fd5b5060165461037b90610100900460ff1681565b3480156108b457600080fd5b506103ba611eca565b3480156108c957600080fd5b5061037b6108d8366004612c9f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561091257600080fd5b50610359610921366004612c7d565b611ed9565b34801561093257600080fd5b5061041b60155481565b34801561094857600080fd5b5061041b605881565b34801561095d57600080fd5b506103ba611fa6565b600a546001600160a01b031633146109b35760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064015b60405180910390fd5b6109bf600f8383612bc8565b505050565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610a025750610a0282612034565b92915050565b600a546001600160a01b03163314610a505760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6016805461ff001981166101009182900460ff1615909102179055565b606060008054610a7c90613144565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa890613144565b8015610af55780601f10610aca57610100808354040283529160200191610af5565b820191906000526020600020905b815481529060010190602001808311610ad857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b785760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109aa565b506000908152600460205260409020546001600160a01b031690565b6000610b9f826111b0565b9050806001600160a01b0316836001600160a01b03161415610c295760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109aa565b336001600160a01b0382161480610c455750610c4581336108d8565b610cb75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109aa565b6109bf83836120cf565b600a546001600160a01b03163314610d095760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6109bf60118383612bc8565b600a546001600160a01b03163314610d5d5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b611f40610d6d61032060586130b6565b610d7791906130b6565b81610d8160085490565b610d8b91906130b6565b1115610dd95760405162461bcd60e51b815260206004820152600860248201527f4d41585f4d494e5400000000000000000000000000000000000000000000000060448201526064016109aa565b601254605890610dea9083906130b6565b1115610e385760405162461bcd60e51b815260206004820152600b60248201527f47494654535f454d50545900000000000000000000000000000000000000000060448201526064016109aa565b60005b818110156109bf5760128054906000610e538361317f565b9190505550610e96838383818110610e6d57610e6d6131f0565b9050602002016020810190610e829190612c7d565b6008545b610e919060016130b6565b61214a565b80610ea08161317f565b915050610e3b565b610eb23382612164565b610f245760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109aa565b6109bf83838361225b565b6000610f3a8361123b565b8210610fae5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109aa565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b0316331461101f5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6010546001600160a01b03166108fc600561103b4760026130e2565b61104591906130ce565b6040518115909202916000818181858888f1935050505015801561106d573d6000803e3d6000fd5b5060405133904780156108fc02916000818181858888f1935050505015801561109a573d6000803e3d6000fd5b50565b6109bf83838360405180602001604052806000815250611a31565b60006110c360085490565b82106111375760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109aa565b6008828154811061114a5761114a6131f0565b90600052602060002001549050919050565b600a546001600160a01b031633146111a45760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6109bf600e8383612bc8565b6000818152600260205260408120546001600160a01b031680610a025760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109aa565b60006001600160a01b0382166112b95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109aa565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b0316331461131d5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6113276000612440565b565b600a546001600160a01b031633146113715760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b60005b818110156109bf576000838383818110611390576113906131f0565b90506020020160208101906113a59190612c7d565b90506001600160a01b0381166113ec5760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109aa565b6001600160a01b0381166000908152600b602052604090205460ff16156114555760405162461bcd60e51b815260206004820152600f60248201527f4455504c49434154455f454e545259000000000000000000000000000000000060448201526064016109aa565b6001600160a01b03166000908152600b60205260409020805460ff19166001179055806114818161317f565b915050611374565b600a546001600160a01b031633146114d15760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6016805460ff19811660ff90911615179055565b601654610100900460ff161580156114ff575060165460ff165b61154b5760405162461bcd60e51b815260206004820152601560248201527f5468652070726573616c6520697320636c6f736564000000000000000000000060448201526064016109aa565b336000908152600b602052604090205460ff166115d05760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f74207175616c696669656420666f722074686520707260448201527f6573616c6500000000000000000000000000000000000000000000000000000060648201526084016109aa565b611f406115e061032060586130b6565b6115ea91906130b6565b6008541061163a5760405162461bcd60e51b815260206004820152601760248201527f416c6c2056616d706972657320617265206d696e74656400000000000000000060448201526064016109aa565b6103208160145461164b91906130b6565b11156116bf5760405162461bcd60e51b815260206004820152602b60248201527f4d696e74696e6720776f756c6420657863656564207468652070726573616c6560448201527f20616c6c6f636174696f6e00000000000000000000000000000000000000000060648201526084016109aa565b601554336000908152600c60205260409020546116dd9083906130b6565b11156117515760405162461bcd60e51b815260206004820152602c60248201527f596f752063616e206d696e7420757020746f20322056616d706972657320696e60448201527f207468652070726573616c65000000000000000000000000000000000000000060648201526084016109aa565b346117648267011c37937e0800006130e2565b11156117b25760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109aa565b60005b8181101561181157601480549060006117cd8361317f565b9091555050336000908152600c602052604081208054916117ed8361317f565b91905055506117ff33610e8660085490565b806118098161317f565b9150506117b5565b5050565b600a546001600160a01b0316331461185d5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6109bf600d8383612bc8565b606060018054610a7c90613144565b6001600160a01b0382163314156118d15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109aa565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a546001600160a01b031633146119855760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b60005b818110156109bf5760008383838181106119a4576119a46131f0565b90506020020160208101906119b99190612c7d565b90506001600160a01b038116611a005760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109aa565b6001600160a01b03166000908152600b60205260409020805460ff1916905580611a298161317f565b915050611988565b611a3b3383612164565b611aad5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109aa565b611ab98484848461249f565b50505050565b6000818152600260205260409020546060906001600160a01b0316611b265760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207175657279206e6f6e2d6578697374656e7420746f6b656e0060448201526064016109aa565b6000600e8054611b3590613144565b905011611bcc57600f8054611b4990613144565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7590613144565b8015611bc25780601f10611b9757610100808354040283529160200191611bc2565b820191906000526020600020905b815481529060010190602001808311611ba557829003601f168201915b5050505050610a02565b600e611bd78361251d565b604051602001611be8929190612fc0565b60405160208183030381529060405292915050565b601654610100900460ff16611c545760405162461bcd60e51b815260206004820152601060248201527f53616c65206973206e6f74206c6976650000000000000000000000000000000060448201526064016109aa565b60165460ff1615611ca75760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792070726573616c6572732063616e206275790000000000000000000060448201526064016109aa565b611f40611cb761032060586130b6565b611cc191906130b6565b60085410611d115760405162461bcd60e51b815260206004820152601760248201527f416c6c2056616d706972657320617265206d696e74656400000000000000000060448201526064016109aa565b611f4081601354611d2291906130b6565b1115611d965760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e6720776f756c642065786365656420746865206d61782070756260448201527f696320737570706c79000000000000000000000000000000000000000000000060648201526084016109aa565b600a811115611e0d5760405162461bcd60e51b815260206004820152602e60248201527f596f752063616e206d696e7420757020746f2031302056616d7069726573207060448201527f6572207472616e73616374696f6e00000000000000000000000000000000000060648201526084016109aa565b34611e208267011c37937e0800006130e2565b1115611e6e5760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109aa565b60005b818110156118115760138054906000611e898361317f565b9190505550611e9b33610e8660085490565b80611ea58161317f565b915050611e71565b611f40611ebd61032060586130b6565b611ec791906130b6565b81565b6060600d8054610a7c90613144565b600a546001600160a01b03163314611f215760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6001600160a01b038116611f9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109aa565b61109a81612440565b60118054611fb390613144565b80601f0160208091040260200160405190810160405280929190818152602001828054611fdf90613144565b801561202c5780601f106120015761010080835404028352916020019161202c565b820191906000526020600020905b81548152906001019060200180831161200f57829003601f168201915b505050505081565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061209757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a0257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a02565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190612111826111b0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61181182826040518060200160405280600081525061264f565b6000818152600260205260408120546001600160a01b03166121dd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109aa565b60006121e8836111b0565b9050806001600160a01b0316846001600160a01b031614806122235750836001600160a01b031661221884610aff565b6001600160a01b0316145b8061225357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661226e826111b0565b6001600160a01b0316146122ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109aa565b6001600160a01b0382166123655760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109aa565b6123708383836126cd565b61237b6000826120cf565b6001600160a01b03831660009081526003602052604081208054600192906123a4908490613101565b90915550506001600160a01b03821660009081526003602052604081208054600192906123d29084906130b6565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6124aa84848461225b565b6124b684848484612785565b611ab95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109aa565b60608161255d57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561258757806125718161317f565b91506125809050600a836130ce565b9150612561565b60008167ffffffffffffffff8111156125a2576125a2613206565b6040519080825280601f01601f1916602001820160405280156125cc576020820181803683370190505b5090505b8415612253576125e1600183613101565b91506125ee600a8661319a565b6125f99060306130b6565b60f81b81838151811061260e5761260e6131f0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612648600a866130ce565b94506125d0565b61265983836128dd565b6126666000848484612785565b6109bf5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109aa565b6001600160a01b0383166127285761272381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61274b565b816001600160a01b0316836001600160a01b03161461274b5761274b8382612a38565b6001600160a01b038216612762576109bf81612ad5565b826001600160a01b0316826001600160a01b0316146109bf576109bf8282612b84565b60006001600160a01b0384163b156128d257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127c9903390899088908890600401613067565b602060405180830381600087803b1580156127e357600080fd5b505af1925050508015612813575060408051601f3d908101601f1916820190925261281091810190612ee2565b60015b6128b8573d808015612841576040519150601f19603f3d011682016040523d82523d6000602084013e612846565b606091505b5080516128b05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109aa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612253565b506001949350505050565b6001600160a01b0382166129335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109aa565b6000818152600260205260409020546001600160a01b0316156129985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109aa565b6129a4600083836126cd565b6001600160a01b03821660009081526003602052604081208054600192906129cd9084906130b6565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612a458461123b565b612a4f9190613101565b600083815260076020526040902054909150808214612aa2576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612ae790600190613101565b60008381526009602052604081205460088054939450909284908110612b0f57612b0f6131f0565b906000526020600020015490508060088381548110612b3057612b306131f0565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612b6857612b686131da565b6001900381819060005260206000200160009055905550505050565b6000612b8f8361123b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612bd490613144565b90600052602060002090601f016020900481019282612bf65760008555612c3c565b82601f10612c0f5782800160ff19823516178555612c3c565b82800160010185558215612c3c579182015b82811115612c3c578235825591602001919060010190612c21565b50612c48929150612c4c565b5090565b5b80821115612c485760008155600101612c4d565b80356001600160a01b0381168114612c7857600080fd5b919050565b600060208284031215612c8f57600080fd5b612c9882612c61565b9392505050565b60008060408385031215612cb257600080fd5b612cbb83612c61565b9150612cc960208401612c61565b90509250929050565b600080600060608486031215612ce757600080fd5b612cf084612c61565b9250612cfe60208501612c61565b9150604084013590509250925092565b60008060008060808587031215612d2457600080fd5b612d2d85612c61565b9350612d3b60208601612c61565b925060408501359150606085013567ffffffffffffffff80821115612d5f57600080fd5b818701915087601f830112612d7357600080fd5b813581811115612d8557612d85613206565b604051601f8201601f19908116603f01168101908382118183101715612dad57612dad613206565b816040528281528a6020848701011115612dc657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612dfd57600080fd5b612e0683612c61565b915060208301358015158114612e1b57600080fd5b809150509250929050565b60008060408385031215612e3957600080fd5b612e4283612c61565b946020939093013593505050565b60008060208385031215612e6357600080fd5b823567ffffffffffffffff80821115612e7b57600080fd5b818501915085601f830112612e8f57600080fd5b813581811115612e9e57600080fd5b8660208260051b8501011115612eb357600080fd5b60209290920196919550909350505050565b600060208284031215612ed757600080fd5b8135612c988161321c565b600060208284031215612ef457600080fd5b8151612c988161321c565b60008060208385031215612f1257600080fd5b823567ffffffffffffffff80821115612f2a57600080fd5b818501915085601f830112612f3e57600080fd5b813581811115612f4d57600080fd5b866020828501011115612eb357600080fd5b600060208284031215612f7157600080fd5b5035919050565b60008151808452612f90816020860160208601613118565b601f01601f19169290920160200192915050565b60008151612fb6818560208601613118565b9290920192915050565b600080845481600182811c915080831680612fdc57607f831692505b6020808410821415612ffc57634e487b7160e01b86526022600452602486fd5b81801561301057600181146130215761304e565b60ff1986168952848901965061304e565b60008b81526020902060005b868110156130465781548b82015290850190830161302d565b505084890196505b50505050505061305e8185612fa4565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526130996080830184612f78565b9695505050505050565b602081526000612c986020830184612f78565b600082198211156130c9576130c96131ae565b500190565b6000826130dd576130dd6131c4565b500490565b60008160001904831182151516156130fc576130fc6131ae565b500290565b600082821015613113576131136131ae565b500390565b60005b8381101561313357818101518382015260200161311b565b83811115611ab95750506000910152565b600181811c9082168061315857607f821691505b6020821081141561317957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613193576131936131ae565b5060010190565b6000826131a9576131a96131c4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461109a57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205a0b2c42c603503819f7abd38a021bb5882e41cce96efca087bbe7eb78c6524864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106103345760003560e01c8063730f8c65116101b0578063a29714da116100ec578063e081b78111610095578063f2fde38b1161006f578063f2fde38b14610906578063f474307014610926578063fac2e3c11461093c578063faf924cf1461095157600080fd5b8063e081b78114610889578063e8a3d485146108a8578063e985e9c5146108bd57600080fd5b8063c87b56dd116100c6578063c87b56dd14610841578063d96a094a14610861578063dbf314cc1461087457600080fd5b8063a29714da146107eb578063b179e06014610801578063b88d4fde1461082157600080fd5b8063938e3d7b116101595780639bf80316116101335780639bf80316146107355780639cf2e8d6146107625780639e273b2f14610792578063a22cb465146107cb57600080fd5b8063938e3d7b146106ea578063940f1ada1461070a57806395d89b411461072057600080fd5b8063815f7bbd1161018a578063815f7bbd1461069f57806383a9e049146106b25780638da5cb5b146106cc57600080fd5b8063730f8c651461065f5780637bffb4ce146106745780637ed32dad1461068957600080fd5b80632f745c591161027f57806359a12ad5116102285780636352211e116102025780636352211e146105ea57806370a082311461060a578063715018a61461062a5780637204a3c91461063f57600080fd5b806359a12ad5146105865780635ce7af1f1461059c57806360d938dc146105d257600080fd5b80634f6ccce7116102595780634f6ccce71461052957806355f804b314610549578063564566a81461056957600080fd5b80632f745c59146104d45780633ccfd60b146104f457806342842e0e1461050957600080fd5b8063095ea7b3116102e157806318160ddd116102bb57806318160ddd146104895780631b57190e1461049e57806323b872dd146104b457600080fd5b8063095ea7b3146104295780631096952314610449578063163e1e611461046957600080fd5b806306fdde031161031257806306fdde03146103a5578063081812fc146103c757806308333598146103ff57600080fd5b806301e669721461033957806301ffc9a71461035b578063049c5c4914610390575b600080fd5b34801561034557600080fd5b50610359610354366004612eff565b610966565b005b34801561036757600080fd5b5061037b610376366004612ec5565b6109c4565b60405190151581526020015b60405180910390f35b34801561039c57600080fd5b50610359610a08565b3480156103b157600080fd5b506103ba610a6d565b60405161038791906130a3565b3480156103d357600080fd5b506103e76103e2366004612f5f565b610aff565b6040516001600160a01b039091168152602001610387565b34801561040b57600080fd5b5061041b67011c37937e08000081565b604051908152602001610387565b34801561043557600080fd5b50610359610444366004612e26565b610b94565b34801561045557600080fd5b50610359610464366004612eff565b610cc1565b34801561047557600080fd5b50610359610484366004612e50565b610d15565b34801561049557600080fd5b5060085461041b565b3480156104aa57600080fd5b5061041b60125481565b3480156104c057600080fd5b506103596104cf366004612cd2565b610ea8565b3480156104e057600080fd5b5061041b6104ef366004612e26565b610f2f565b34801561050057600080fd5b50610359610fd7565b34801561051557600080fd5b50610359610524366004612cd2565b61109d565b34801561053557600080fd5b5061041b610544366004612f5f565b6110b8565b34801561055557600080fd5b50610359610564366004612eff565b61115c565b34801561057557600080fd5b50601654610100900460ff1661037b565b34801561059257600080fd5b5061041b60145481565b3480156105a857600080fd5b5061041b6105b7366004612c7d565b6001600160a01b03166000908152600c602052604090205490565b3480156105de57600080fd5b5060165460ff1661037b565b3480156105f657600080fd5b506103e7610605366004612f5f565b6111b0565b34801561061657600080fd5b5061041b610625366004612c7d565b61123b565b34801561063657600080fd5b506103596112d5565b34801561064b57600080fd5b5061035961065a366004612e50565b611329565b34801561066b57600080fd5b5061041b600a81565b34801561068057600080fd5b50610359611489565b34801561069557600080fd5b5061041b611f4081565b6103596106ad366004612f5f565b6114e5565b3480156106be57600080fd5b5060165461037b9060ff1681565b3480156106d857600080fd5b50600a546001600160a01b03166103e7565b3480156106f657600080fd5b50610359610705366004612eff565b611815565b34801561071657600080fd5b5061041b60135481565b34801561072c57600080fd5b506103ba611869565b34801561074157600080fd5b5061041b610750366004612c7d565b600c6020526000908152604090205481565b34801561076e57600080fd5b5061037b61077d366004612c7d565b600b6020526000908152604090205460ff1681565b34801561079e57600080fd5b5061037b6107ad366004612c7d565b6001600160a01b03166000908152600b602052604090205460ff1690565b3480156107d757600080fd5b506103596107e6366004612dea565b611878565b3480156107f757600080fd5b5061041b61032081565b34801561080d57600080fd5b5061035961081c366004612e50565b61193d565b34801561082d57600080fd5b5061035961083c366004612d0e565b611a31565b34801561084d57600080fd5b506103ba61085c366004612f5f565b611abf565b61035961086f366004612f5f565b611bfd565b34801561088057600080fd5b5061041b611ead565b34801561089557600080fd5b5060165461037b90610100900460ff1681565b3480156108b457600080fd5b506103ba611eca565b3480156108c957600080fd5b5061037b6108d8366004612c9f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561091257600080fd5b50610359610921366004612c7d565b611ed9565b34801561093257600080fd5b5061041b60155481565b34801561094857600080fd5b5061041b605881565b34801561095d57600080fd5b506103ba611fa6565b600a546001600160a01b031633146109b35760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064015b60405180910390fd5b6109bf600f8383612bc8565b505050565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610a025750610a0282612034565b92915050565b600a546001600160a01b03163314610a505760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6016805461ff001981166101009182900460ff1615909102179055565b606060008054610a7c90613144565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa890613144565b8015610af55780601f10610aca57610100808354040283529160200191610af5565b820191906000526020600020905b815481529060010190602001808311610ad857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610b785760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109aa565b506000908152600460205260409020546001600160a01b031690565b6000610b9f826111b0565b9050806001600160a01b0316836001600160a01b03161415610c295760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109aa565b336001600160a01b0382161480610c455750610c4581336108d8565b610cb75760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109aa565b6109bf83836120cf565b600a546001600160a01b03163314610d095760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6109bf60118383612bc8565b600a546001600160a01b03163314610d5d5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b611f40610d6d61032060586130b6565b610d7791906130b6565b81610d8160085490565b610d8b91906130b6565b1115610dd95760405162461bcd60e51b815260206004820152600860248201527f4d41585f4d494e5400000000000000000000000000000000000000000000000060448201526064016109aa565b601254605890610dea9083906130b6565b1115610e385760405162461bcd60e51b815260206004820152600b60248201527f47494654535f454d50545900000000000000000000000000000000000000000060448201526064016109aa565b60005b818110156109bf5760128054906000610e538361317f565b9190505550610e96838383818110610e6d57610e6d6131f0565b9050602002016020810190610e829190612c7d565b6008545b610e919060016130b6565b61214a565b80610ea08161317f565b915050610e3b565b610eb23382612164565b610f245760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109aa565b6109bf83838361225b565b6000610f3a8361123b565b8210610fae5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109aa565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b0316331461101f5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6010546001600160a01b03166108fc600561103b4760026130e2565b61104591906130ce565b6040518115909202916000818181858888f1935050505015801561106d573d6000803e3d6000fd5b5060405133904780156108fc02916000818181858888f1935050505015801561109a573d6000803e3d6000fd5b50565b6109bf83838360405180602001604052806000815250611a31565b60006110c360085490565b82106111375760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109aa565b6008828154811061114a5761114a6131f0565b90600052602060002001549050919050565b600a546001600160a01b031633146111a45760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6109bf600e8383612bc8565b6000818152600260205260408120546001600160a01b031680610a025760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109aa565b60006001600160a01b0382166112b95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109aa565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b0316331461131d5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6113276000612440565b565b600a546001600160a01b031633146113715760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b60005b818110156109bf576000838383818110611390576113906131f0565b90506020020160208101906113a59190612c7d565b90506001600160a01b0381166113ec5760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109aa565b6001600160a01b0381166000908152600b602052604090205460ff16156114555760405162461bcd60e51b815260206004820152600f60248201527f4455504c49434154455f454e545259000000000000000000000000000000000060448201526064016109aa565b6001600160a01b03166000908152600b60205260409020805460ff19166001179055806114818161317f565b915050611374565b600a546001600160a01b031633146114d15760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6016805460ff19811660ff90911615179055565b601654610100900460ff161580156114ff575060165460ff165b61154b5760405162461bcd60e51b815260206004820152601560248201527f5468652070726573616c6520697320636c6f736564000000000000000000000060448201526064016109aa565b336000908152600b602052604090205460ff166115d05760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f74207175616c696669656420666f722074686520707260448201527f6573616c6500000000000000000000000000000000000000000000000000000060648201526084016109aa565b611f406115e061032060586130b6565b6115ea91906130b6565b6008541061163a5760405162461bcd60e51b815260206004820152601760248201527f416c6c2056616d706972657320617265206d696e74656400000000000000000060448201526064016109aa565b6103208160145461164b91906130b6565b11156116bf5760405162461bcd60e51b815260206004820152602b60248201527f4d696e74696e6720776f756c6420657863656564207468652070726573616c6560448201527f20616c6c6f636174696f6e00000000000000000000000000000000000000000060648201526084016109aa565b601554336000908152600c60205260409020546116dd9083906130b6565b11156117515760405162461bcd60e51b815260206004820152602c60248201527f596f752063616e206d696e7420757020746f20322056616d706972657320696e60448201527f207468652070726573616c65000000000000000000000000000000000000000060648201526084016109aa565b346117648267011c37937e0800006130e2565b11156117b25760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109aa565b60005b8181101561181157601480549060006117cd8361317f565b9091555050336000908152600c602052604081208054916117ed8361317f565b91905055506117ff33610e8660085490565b806118098161317f565b9150506117b5565b5050565b600a546001600160a01b0316331461185d5760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6109bf600d8383612bc8565b606060018054610a7c90613144565b6001600160a01b0382163314156118d15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109aa565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a546001600160a01b031633146119855760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b60005b818110156109bf5760008383838181106119a4576119a46131f0565b90506020020160208101906119b99190612c7d565b90506001600160a01b038116611a005760405162461bcd60e51b815260206004820152600c60248201526b4e554c4c5f4144445245535360a01b60448201526064016109aa565b6001600160a01b03166000908152600b60205260409020805460ff1916905580611a298161317f565b915050611988565b611a3b3383612164565b611aad5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109aa565b611ab98484848461249f565b50505050565b6000818152600260205260409020546060906001600160a01b0316611b265760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207175657279206e6f6e2d6578697374656e7420746f6b656e0060448201526064016109aa565b6000600e8054611b3590613144565b905011611bcc57600f8054611b4990613144565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7590613144565b8015611bc25780601f10611b9757610100808354040283529160200191611bc2565b820191906000526020600020905b815481529060010190602001808311611ba557829003601f168201915b5050505050610a02565b600e611bd78361251d565b604051602001611be8929190612fc0565b60405160208183030381529060405292915050565b601654610100900460ff16611c545760405162461bcd60e51b815260206004820152601060248201527f53616c65206973206e6f74206c6976650000000000000000000000000000000060448201526064016109aa565b60165460ff1615611ca75760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792070726573616c6572732063616e206275790000000000000000000060448201526064016109aa565b611f40611cb761032060586130b6565b611cc191906130b6565b60085410611d115760405162461bcd60e51b815260206004820152601760248201527f416c6c2056616d706972657320617265206d696e74656400000000000000000060448201526064016109aa565b611f4081601354611d2291906130b6565b1115611d965760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e6720776f756c642065786365656420746865206d61782070756260448201527f696320737570706c79000000000000000000000000000000000000000000000060648201526084016109aa565b600a811115611e0d5760405162461bcd60e51b815260206004820152602e60248201527f596f752063616e206d696e7420757020746f2031302056616d7069726573207060448201527f6572207472616e73616374696f6e00000000000000000000000000000000000060648201526084016109aa565b34611e208267011c37937e0800006130e2565b1115611e6e5760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74204554482073656e74000000000000000000000060448201526064016109aa565b60005b818110156118115760138054906000611e898361317f565b9190505550611e9b33610e8660085490565b80611ea58161317f565b915050611e71565b611f40611ebd61032060586130b6565b611ec791906130b6565b81565b6060600d8054610a7c90613144565b600a546001600160a01b03163314611f215760405162461bcd60e51b8152602060048201819052602482015260008051602061323383398151915260448201526064016109aa565b6001600160a01b038116611f9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109aa565b61109a81612440565b60118054611fb390613144565b80601f0160208091040260200160405190810160405280929190818152602001828054611fdf90613144565b801561202c5780601f106120015761010080835404028352916020019161202c565b820191906000526020600020905b81548152906001019060200180831161200f57829003601f168201915b505050505081565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061209757506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a0257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a02565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190612111826111b0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61181182826040518060200160405280600081525061264f565b6000818152600260205260408120546001600160a01b03166121dd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109aa565b60006121e8836111b0565b9050806001600160a01b0316846001600160a01b031614806122235750836001600160a01b031661221884610aff565b6001600160a01b0316145b8061225357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661226e826111b0565b6001600160a01b0316146122ea5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016109aa565b6001600160a01b0382166123655760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016109aa565b6123708383836126cd565b61237b6000826120cf565b6001600160a01b03831660009081526003602052604081208054600192906123a4908490613101565b90915550506001600160a01b03821660009081526003602052604081208054600192906123d29084906130b6565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6124aa84848461225b565b6124b684848484612785565b611ab95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109aa565b60608161255d57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561258757806125718161317f565b91506125809050600a836130ce565b9150612561565b60008167ffffffffffffffff8111156125a2576125a2613206565b6040519080825280601f01601f1916602001820160405280156125cc576020820181803683370190505b5090505b8415612253576125e1600183613101565b91506125ee600a8661319a565b6125f99060306130b6565b60f81b81838151811061260e5761260e6131f0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612648600a866130ce565b94506125d0565b61265983836128dd565b6126666000848484612785565b6109bf5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109aa565b6001600160a01b0383166127285761272381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61274b565b816001600160a01b0316836001600160a01b03161461274b5761274b8382612a38565b6001600160a01b038216612762576109bf81612ad5565b826001600160a01b0316826001600160a01b0316146109bf576109bf8282612b84565b60006001600160a01b0384163b156128d257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127c9903390899088908890600401613067565b602060405180830381600087803b1580156127e357600080fd5b505af1925050508015612813575060408051601f3d908101601f1916820190925261281091810190612ee2565b60015b6128b8573d808015612841576040519150601f19603f3d011682016040523d82523d6000602084013e612846565b606091505b5080516128b05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016109aa565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612253565b506001949350505050565b6001600160a01b0382166129335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109aa565b6000818152600260205260409020546001600160a01b0316156129985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109aa565b6129a4600083836126cd565b6001600160a01b03821660009081526003602052604081208054600192906129cd9084906130b6565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001612a458461123b565b612a4f9190613101565b600083815260076020526040902054909150808214612aa2576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612ae790600190613101565b60008381526009602052604081205460088054939450909284908110612b0f57612b0f6131f0565b906000526020600020015490508060088381548110612b3057612b306131f0565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612b6857612b686131da565b6001900381819060005260206000200160009055905550505050565b6000612b8f8361123b565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612bd490613144565b90600052602060002090601f016020900481019282612bf65760008555612c3c565b82601f10612c0f5782800160ff19823516178555612c3c565b82800160010185558215612c3c579182015b82811115612c3c578235825591602001919060010190612c21565b50612c48929150612c4c565b5090565b5b80821115612c485760008155600101612c4d565b80356001600160a01b0381168114612c7857600080fd5b919050565b600060208284031215612c8f57600080fd5b612c9882612c61565b9392505050565b60008060408385031215612cb257600080fd5b612cbb83612c61565b9150612cc960208401612c61565b90509250929050565b600080600060608486031215612ce757600080fd5b612cf084612c61565b9250612cfe60208501612c61565b9150604084013590509250925092565b60008060008060808587031215612d2457600080fd5b612d2d85612c61565b9350612d3b60208601612c61565b925060408501359150606085013567ffffffffffffffff80821115612d5f57600080fd5b818701915087601f830112612d7357600080fd5b813581811115612d8557612d85613206565b604051601f8201601f19908116603f01168101908382118183101715612dad57612dad613206565b816040528281528a6020848701011115612dc657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612dfd57600080fd5b612e0683612c61565b915060208301358015158114612e1b57600080fd5b809150509250929050565b60008060408385031215612e3957600080fd5b612e4283612c61565b946020939093013593505050565b60008060208385031215612e6357600080fd5b823567ffffffffffffffff80821115612e7b57600080fd5b818501915085601f830112612e8f57600080fd5b813581811115612e9e57600080fd5b8660208260051b8501011115612eb357600080fd5b60209290920196919550909350505050565b600060208284031215612ed757600080fd5b8135612c988161321c565b600060208284031215612ef457600080fd5b8151612c988161321c565b60008060208385031215612f1257600080fd5b823567ffffffffffffffff80821115612f2a57600080fd5b818501915085601f830112612f3e57600080fd5b813581811115612f4d57600080fd5b866020828501011115612eb357600080fd5b600060208284031215612f7157600080fd5b5035919050565b60008151808452612f90816020860160208601613118565b601f01601f19169290920160200192915050565b60008151612fb6818560208601613118565b9290920192915050565b600080845481600182811c915080831680612fdc57607f831692505b6020808410821415612ffc57634e487b7160e01b86526022600452602486fd5b81801561301057600181146130215761304e565b60ff1986168952848901965061304e565b60008b81526020902060005b868110156130465781548b82015290850190830161302d565b505084890196505b50505050505061305e8185612fa4565b95945050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526130996080830184612f78565b9695505050505050565b602081526000612c986020830184612f78565b600082198211156130c9576130c96131ae565b500190565b6000826130dd576130dd6131c4565b500490565b60008160001904831182151516156130fc576130fc6131ae565b500290565b600082821015613113576131136131ae565b500390565b60005b8381101561313357818101518382015260200161311b565b83811115611ab95750506000910152565b600181811c9082168061315857607f821691505b6020821081141561317957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613193576131936131ae565b5060010190565b6000826131a9576131a96131c4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461109a57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205a0b2c42c603503819f7abd38a021bb5882e41cce96efca087bbe7eb78c6524864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2045,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "presalerList",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2049,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "presalerListPurchases",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2051,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_contractURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 2053,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 2055,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_defaultBaseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2058,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "_artistAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 2060,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "proof",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 2062,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "giftedAmount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2064,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "publicAmountMinted",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2066,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "privateAmountMinted",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2069,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "presalePurchaseLimit",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2071,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "presaleLive",
        "offset": 0,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 2073,
        "contract": "contracts/SneakyVampireSyndicate.sol:SneakyVampireSyndicate",
        "label": "saleLive",
        "offset": 1,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}